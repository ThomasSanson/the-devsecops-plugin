---
image: registry.gitlab.com/digital-commons/devsecops/tools/the-devsecops-plugin:12.2.0

include:
  - local: .config/gitlab/ci/before_script.yml
  - local: .config/gitlab/ci/services.yml
  - local: .config/gitlab/ci/stages.yml
  - local: .config/gitlab/ci/variables.yml
  # - local: .config/gitlab/ci/workflow.yml

workflow:
  rules:
    # Rule 1: Highest priority. Always run a pipeline for the 'staging' tag,
    # regardless of the commit message.
    - if: '$CI_COMMIT_TAG == "staging"'
      when: always

    # Rule 2: If the pipeline is for a branch (not a tag) AND the commit message
    # starts with "build: bump version", explicitly prevent a pipeline from running.
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_MESSAGE =~ /^build: bump version/'
      when: never

    # Rule 3: Default catch-all for normal development.
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'web'
    - if: $CI_PIPELINE_SOURCE == 'schedule'

plan:
  stage: plan
  needs: []  # Allows parallel execution
  script:
    - task plan
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_PLAN_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always

code:
  stage: code
  retry: 1
  needs: []  # Allows parallel execution
  tags:
    - saas-linux-medium-amd64
  script:
    - task code
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_CODE_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Do not execute default jobs on the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always

build:
  stage: build
  needs: []  # Allows parallel execution
  tags:
    - saas-linux-medium-amd64
  script:
    - task build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_BUILD_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Do not execute default jobs on the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always

test:
  stage: test
  retry: 1
  needs: []  # Allows parallel execution
  tags:
    - saas-linux-medium-amd64
  script:
    - task test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_TEST_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Do not execute default jobs on the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always

release:
  stage: release
  needs: []  # Allows parallel execution
  tags:
    - saas-linux-medium-amd64
  variables:
    # Variables for commitizen bump (likely used within 'task release')
    TASK_DEVSECOPS_RELEASE_CURRENT_BRANCH: $CI_COMMIT_BRANCH
    TASK_DEVSECOPS_RELEASE_DEFAULT_BRANCH: $CI_DEFAULT_BRANCH
    # Variables for push-release task
    TASK_DEVSECOPS_RELEASE_ALLOW_PUSH: $CZ_ALLOW_PUSH
    TASK_DEVSECOPS_RELEASE_DEPLOY_KEY: $CZ_DEPLOY_KEY
    TASK_DEVSECOPS_RELEASE_GIT_SERVER_HOST: $CI_SERVER_SHELL_SSH_HOST
    TASK_DEVSECOPS_RELEASE_PROJECT_PATH: $CI_PROJECT_PATH
    # Variables for Docker (likely used within 'task release')
    TASK_DOCKER_CE_AUTH_ENABLED: "true"
    TASK_DOCKER_CE_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
    TASK_DOCKER_CE_PUSH: "true"
    TASK_DOCKER_CE_REGISTRY_PASSWORD: ${CI_REGISTRY_PASSWORD}
    TASK_DOCKER_CE_REGISTRY_URL: ${CI_REGISTRY}
    TASK_DOCKER_CE_REGISTRY_USERNAME: ${CI_REGISTRY_USER}
  script:
    - task release
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_RELEASE_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always

deploy:
  stage: deploy
  needs: []  # Allows parallel execution
  script:
    - task deploy
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_DEPLOY_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Do not execute default jobs on the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always

operate:
  stage: operate
  needs: []  # Allows parallel execution
  script:
    - task operate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_OPERATE_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Do not execute default jobs on the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always

monitor:
  stage: monitor
  needs: []  # Allows parallel execution
  script:
    - task monitor
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_MONITOR_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Do not execute default jobs on the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always

feedback:
  stage: feedback
  needs: []  # Allows parallel execution
  script:
    - task feedback
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_ALL_SCHEDULE == "1"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_FEEDBACK_SCHEDULE == "1"'
      when: always
    - if: $CI_COMMIT_TAG =~ /^staging$/
      when: never
    # Run in all other cases (MRs, feature branches, etc.)
    - when: always
