---
version: "3"

vars:
  TEST_TMP_DIR: '{{.USER_WORKING_DIR}}/tmp/tests/copier'
  TEST_PROJECT_NAME: 'generated-project'

tasks:
  default:
    desc: |
      ‚ÑπÔ∏è Description:
        Tests the copier copy functionality by copying from the current
        template to a temporary destination and verifying the existence
        of essential files.

      üîß Variables:
        - TEST_TMP_DIR: Temporary directory for test output
          Default: "./tmp/tests/copier"
        - TEST_PROJECT_NAME: Name of the test project
          Default: "generated-project"

      üîÑ Execution:
        1. Cleans up previous test directories
        2. Creates a test directory in tmp/tests/copier/
        3. Runs copier copy command to copy template to test directory
        4. Runs verification tests for the copied project

      üìù Usage:
        task test
    deps:
      - ::copier:install
      - cleanup
    cmds:
      # Create a simple temporary directory for this test
      - mkdir -p {{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}

      # Run the copier copy command (using the local template)
      - task: ::copier
        vars:
          CLI_ARGS: copy {{.USER_WORKING_DIR}} --vcs-ref=HEAD {{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}

      # Run verification tests
      - task: verify:copier-answers
      - task: verify:no-file
      - task: verify:no-directory
      - task: verify:commitizen-config
      - task: verify:helm-chart-name
      - task: verify:devsecops-task

  cleanup:
    desc: |
      ‚ÑπÔ∏è Description:
        Cleans up test directories created by the copier tests.

      üîß Variables:
        - TEST_TMP_DIR: Temporary directory for test output
          Default: "./tmp/tests/copier"
        - TEST_PROJECT_NAME: Name of the test project
          Default: "generated-project"

      üîÑ Execution:
        Removes the test directory from tmp/tests/copier/

      üìù Usage:
        task cleanup
    cmds:
      - rm -rf {{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}
      - echo "‚úÖ [{{.TASK}}] Copier test directory has been cleaned up"


  verify:copier-answers:
    desc: |
      ‚ÑπÔ∏è Description:
        Verifies that the .copier-answers.yml file exists in the destination.
        This is a critical file that confirms the template was correctly copied.

      üîß Variables:
        - TEST_TMP_DIR: Temporary directory for test output
        - TEST_PROJECT_NAME: Name of the test project

      üîÑ Execution:
        Checks for the existence of .config/devsecops/.copier-answers.yml

      üìù Usage:
        task verify:copier-answers
    cmds:
      - |
        if [ -f "{{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}/.config/devsecops/.copier-answers.yml" ]; then
          echo "‚úÖ [{{.TASK}}] Test passed: .copier-answers.yml file exists in the destination"
        else
          echo "‚ùå [{{.TASK}}]"
          echo "Failed: .copier-answers.yml file does not exist in the destination"
          exit 1
        fi

  verify:no-file:
    desc: Verifies that certain files do not exist in the generated project
    vars:
      FILES_TO_CHECK:
        - iac/environment/testing/superset-values.yaml
        - iac/helm/Chart.lock
        - tests/infra/kube/ansible/verify/superset_is_ready.yml
        - tests/infra/kube/ansible/verify/superset_login_page_check.yml
    cmds:
      - for:
          var: FILES_TO_CHECK
          as: FILE
        cmd: |
          if [ -f "{{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}/{{.FILE}}" ]; then
            echo "‚ùå [{{.TASK}}]"
            echo "Failed: '{{.FILE}}' file exists in the generated project"
            echo "{{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}/{{.FILE}}"
            exit 1
          fi
        silent: true
      - cmd: echo "‚úÖ [{{.TASK}}] All directory checks passed"
        silent: true

  verify:no-directory:
    desc: Verifies that certain directories do not exist in the generated project
    vars:
      DIRS_TO_CHECK:
        - .cache
        - .config/**/roles
        - .vscode
        - megalinter-reports
        - node_modules
        - tests/copier
        - tmp
        - venv
    cmds:
      - for:
          var: DIRS_TO_CHECK
          as: DIR
        cmd: |
          if [ -d "{{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}/{{.DIR}}" ]; then
            echo "‚ùå [{{.TASK}}]"
            echo "Failed: '{{.DIR}}' directory exists in the generated project"
            echo "{{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}/{{.DIR}}"
            exit 1
          fi
        silent: true
      - cmd: echo "‚úÖ [{{.TASK}}] All directory checks passed"
        silent: true

  verify:devsecops-task:
    desc: |
      ‚ÑπÔ∏è Description:
        Verifies that a DevSecOps task can be executed in the generated project.
        This test ensures that the generated project is functional and properly
        configured with DevSecOps capabilities.

      üîß Variables:
        - TEST_TMP_DIR: Temporary directory for test output
        - TEST_PROJECT_NAME: Name of the test project

      üîÑ Execution:
        Runs a simple DevSecOps task in the generated project and checks for success

      üìù Usage:
        task verify:devsecops-task
    cmds:
      - |
        echo "üîç Testing DevSecOps task execution in the generated project..."
        echo "üìÇ Working directory: {{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}"

        # First, list available tasks to help with debugging
        echo "üìã Available tasks in the generated "
        cd {{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}} && task --list | grep devsecops

      - |
        # Now try to execute the devsecops task
        echo "üöÄ Executing 'task devsecops'..."
        cd {{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}
        time task test

  verify:commitizen-config:
    desc: |
      ‚ÑπÔ∏è Description:
        Verifies that the commitizen configuration file (cz.yaml) has the correct version
        and does not include '.gitlab-ci.yml' in the version_files list.

      üîß Variables:
        - TEST_TMP_DIR: Temporary directory for test output
        - TEST_PROJECT_NAME: Name of the test project

      üîÑ Execution:
        Checks the cz.yaml file for specific configuration values

      üìù Usage:
        task verify:commitizen-config
    cmds:
      - |
        CZ_FILE="{{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}/.config/commitizen/cz.yaml"
        echo "üîç Checking commitizen configuration file: $CZ_FILE"

        # Check if the file exists
        if [ ! -f "$CZ_FILE" ]; then
          echo "‚ùå [{{.TASK}}]"
          echo "Failed: commitizen configuration file does not exist"
          exit 1
        fi

        # Check version is 0.1.0
        VERSION=$(grep "version:" "$CZ_FILE" | grep -v "version_" | awk '{print $2}')
        if [ "$VERSION" != "0.1.0" ]; then
          echo "‚ùå [{{.TASK}}]"
          echo "Failed: Expected version 0.1.0, but found $VERSION"
          exit 1
        else
          echo "‚úÖ [{{.TASK}}] Version check passed: Found version 0.1.0"
        fi

        # Check that .gitlab-ci.yml is not in version_files
        if grep -A10 "version_files:" "$CZ_FILE" | grep -q "\.gitlab-ci\.yml"; then
          echo "‚ùå [{{.TASK}}]"
          echo "Failed: .gitlab-ci.yml found in version_files"
          exit 1
        else
          echo "‚úÖ [{{.TASK}}] version_files check passed: .gitlab-ci.yml not found in version_files"
        fi

        echo "‚úÖ [{{.TASK}}] All commitizen configuration checks passed"

  verify:helm-chart-name:
    desc: |
      ‚ÑπÔ∏è Description:
        Verifies that the Helm Chart.yaml file has the correct project name.

      üîß Variables:
        - TEST_TMP_DIR: Temporary directory for test output
        - TEST_PROJECT_NAME: Name of the test project

      üîÑ Execution:
        Checks the Chart.yaml file for the correct project name

      üìù Usage:
        task verify:helm-chart-name
    cmds:
      - |
        CHART_FILE="{{.TEST_TMP_DIR}}/{{.TEST_PROJECT_NAME}}/iac/helm/Chart.yaml"
        echo "üîç Checking Helm Chart file: $CHART_FILE"

        # Check if the file exists
        if [ ! -f "$CHART_FILE" ]; then
          echo "‚ùå [{{.TASK}}]"
          echo "Failed: Helm Chart file does not exist"
          exit 1
        fi

        # Check project name is 'generated-project'
        PROJECT_NAME=$(grep "^name:" "$CHART_FILE" | awk '{print $2}')
        if [ "$PROJECT_NAME" != "generated-project" ]; then
          echo "‚ùå [{{.TASK}}]"
          echo "Failed: Expected project name 'generated-project', but found '$PROJECT_NAME'"
          exit 1
        else
          echo "‚úÖ [{{.TASK}}] Project name check passed: Found 'generated-project'"
        fi

        echo "‚úÖ [{{.TASK}}] All Helm Chart name checks passed"
