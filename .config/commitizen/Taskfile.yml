---
version: "3"

vars:
  TASK_COMMITIZEN_ENABLED: '{{.TASK_COMMITIZEN_ENABLED | default "true"}}'
  TASK_COMMITIZEN_CONFIG_FULL_PATH: '{{.TASK_COMMITIZEN_CONFIG_FULL_PATH | default ".config/commitizen/cz.yaml"}}'
  TASK_COMMITIZEN_CLI_OPTS: '{{.TASK_COMMITIZEN_CLI_OPTS | default ""}}'
  TASK_COMMITIZEN_CLI_CHECK_OPTS: '{{.TASK_COMMITIZEN_CLI_CHECK_OPTS | default "--rev-range origin/main..HEAD"}}'
  TASK_COMMITIZEN_REQUIREMENTS_FILE: '{{.TASK_COMMITIZEN_REQUIREMENTS_FILE | default ".config/commitizen/requirements.txt"}}'
  TASK_COMMITIZEN_VERSION:
    sh: |
      if [ -n "${TASK_COMMITIZEN_VERSION:-}" ]; then
        echo "${TASK_COMMITIZEN_VERSION}"
      else
        cat {{.TASK_COMMITIZEN_REQUIREMENTS_FILE}}
      fi
  TASK_COMMITIZEN_COMMAND:
    sh: |
      if [ -n "${TASK_COMMITIZEN_COMMAND:-}" ]; then
        echo "${TASK_COMMITIZEN_COMMAND}"
      else
        echo "uvx --from {{.TASK_COMMITIZEN_VERSION}} cz"
      fi
  TASK_COMMITIZEN_BUMP_DRY_RUN: '{{.TASK_COMMITIZEN_BUMP_DRY_RUN | default "false"}}'
  TASK_COMMITIZEN_BUMP_YES: '{{.TASK_COMMITIZEN_BUMP_YES | default "false"}}'
  TASK_COMMITIZEN_BUMP_CHECK_CONSISTENCY: '{{.TASK_COMMITIZEN_BUMP_CHECK_CONSISTENCY | default "true"}}'
  TASK_COMMITIZEN_BUMP_NO_RAISE: '{{.TASK_COMMITIZEN_BUMP_NO_RAISE | default "21"}}'
  TASK_COMMITIZEN_BUMP_CHANGELOG: '{{.TASK_COMMITIZEN_BUMP_CHANGELOG | default "false"}}'
  TASK_COMMITIZEN_BUMP_PRERELEASE: '{{.TASK_COMMITIZEN_BUMP_PRERELEASE | default ""}}'
  TASK_COMMITIZEN_BUMP_DEV_RELEASE: '{{.TASK_COMMITIZEN_BUMP_DEV_RELEASE | default ""}}'
  TASK_COMMITIZEN_DEFAULT_BRANCH: '{{.TASK_COMMITIZEN_DEFAULT_BRANCH | default "main"}}'
  TASK_COMMITIZEN_RELEASE_BRANCH_PATTERN: '{{.TASK_COMMITIZEN_RELEASE_BRANCH_PATTERN | default "^release/"}}'
  TASK_COMMITIZEN_GIT_CURRENT_BRANCH:
    sh: |
      if [ -n "$CI_COMMIT_REF_NAME" ]; then
        echo "$CI_COMMIT_REF_NAME"
      elif [ -n "$GITHUB_REF_NAME" ]; then
        echo "$GITHUB_REF_NAME"
      elif [ -n "$GIT_BRANCH" ]; then
        echo "$GIT_BRANCH"
      else
        # Check if we are in a Git repository
        if git rev-parse --is-inside-work-tree &>/dev/null; then
          git rev-parse --abbrev-ref HEAD
        else
          # Default value if we are not in a Git repository
          echo "main"
        fi
      fi

tasks:
  default:
    interactive: true
    desc: Run Commitizen for commit message formatting.
    summary: |
      ‚ÑπÔ∏è Description:
        Executes Commitizen to guide the user through creating a standardised commit message.

      üîß Variables:
        - TASK_COMMITIZEN_VERSION: Package spec for Commitizen (e.g., "commitizen==3.28.0").
          Default: read from ".config/commitizen/requirements.txt"; can be overridden via env TASK_COMMITIZEN_VERSION.
        - TASK_COMMITIZEN_CONFIG_FULL_PATH: Path to the commitizen configuration file. Default: ".config/commitizen/cz.yaml"
        - TASK_COMMITIZEN_CLI_OPTS: Command line options for commitizen. Default: ""

      üîê Preconditions:
        - A commitizen configuration file must exist at the specified location.

      üîÑ Execution:
        Runs commitizen with the specified options and configuration for interactive commit message creation.

      üìù Note:
        This task should be executed when creating a new commit.
    cmds:
      - cmd: echo "üîÑ Starting Commitizen commit message formatting"
        silent: true
      - uvx --from {{.TASK_COMMITIZEN_VERSION}} cz --config {{.TASK_COMMITIZEN_CONFIG_FULL_PATH}} {{.TASK_COMMITIZEN_CLI_OPTS}} commit {{.CLI_ARGS}}"
      - cmd: echo 'üéâ Commitizen commit message formatting completed.'
        silent: true

  check:
    desc: Verify commit messages with Commitizen.
    summary: |
      ‚ÑπÔ∏è Description:
        Automatically verifies commits using Commitizen rules.

      üîß Variables:
        - TASK_COMMITIZEN_CONFIG_FULL_PATH: Path to the commitizen configuration file. Default: ".config/commitizen/cz.yaml"
        - TASK_COMMITIZEN_CLI_OPTS: Additional command line options for commitizen. Default: ""
        - TASK_COMMITIZEN_CLI_CHECK_OPTS: Options specific to the check command. Default: "--rev-range origin/main..HEAD"

      üîê Preconditions:
        - A commitizen configuration file must exist at the specified location.

      üîÑ Execution:
        Runs the commitizen check command with the specified configuration and options.

      üìù Note:
        This task verifies that commit messages conform to the Commitizen standards.
        The default behaviour checks commits from main to HEAD, but this can be customised
        by modifying the TASK_COMMITIZEN_CLI_CHECK_OPTS variable.
    status:
      - test "{{.TASK_COMMITIZEN_ENABLED}}" = "false"
    vars:
      TASK_COMMITIZEN_COMMAND:
        sh: echo "uvx --from {{.TASK_COMMITIZEN_VERSION}} cz --config {{.TASK_COMMITIZEN_CONFIG_FULL_PATH}} {{.TASK_COMMITIZEN_CLI_OPTS}} check {{.TASK_COMMITIZEN_CLI_CHECK_OPTS}}"
    cmds:
      - cmd: echo "üîÑ Running Commitizen check"
        silent: true
      - cmd: echo "{{.TASK_COMMITIZEN_COMMAND}}"
        silent: true
      - cmd: |
          if {{.TASK_COMMITIZEN_COMMAND}}; then
            echo "üéâ All commits successfully verified with Commitizen!"
          else
            exit_code=$?
            if [ $exit_code -eq 3 ]; then
              echo "‚ö†Ô∏è  Warning: No commits found in the specified range to verify."
            else
              echo "‚ùå Commitizen check failed with exit code $exit_code"
              exit $exit_code
            fi
          fi
      - cmd: echo 'üéâ Commitizen check completed.'
        silent: true

  bump:
    desc: Increment version based on commit history.
    summary: |
      ‚ÑπÔ∏è Description:
        Increments the version number based on the commit history.

      üîß Variables:
        - TASK_COMMITIZEN_CONFIG_FULL_PATH: Path to the commitizen configuration file. Default: ".config/commitizen/cz.yaml"
        - TASK_COMMITIZEN_CLI_OPTS: Additional command line options for commitizen. Default: ""
        - TASK_COMMITIZEN_BUMP_DRY_RUN: Whether to perform a dry run. Default: true
        - TASK_COMMITIZEN_BUMP_YES: Whether to automatically confirm prompts. Default: false
        - TASK_COMMITIZEN_BUMP_CHECK_CONSISTENCY: Whether to check consistency before bumping. Default: true
        - TASK_COMMITIZEN_BUMP_NO_RAISE: Comma-separated error codes that won't raise an error. Default: "21"
        - TASK_COMMITIZEN_BUMP_CHANGELOG: Whether to update the changelog when bumping. Default: false
        - TASK_COMMITIZEN_BUMP_PRERELEASE: Prerelease identifier (e.g., "alpha", "beta"). Default: ""
        - TASK_COMMITIZEN_BUMP_DEV_RELEASE: Development release identifier. Default: ""

      üîê Preconditions:
        - A commitizen configuration file must exist at the specified location.

      üîÑ Execution:
        Runs the commitizen bump command with the specified configuration and options.

      üìù Note:
        This task increments the version number based on the commit history.
        Use TASK_COMMITIZEN_BUMP_DRY_RUN=false to apply changes, TASK_COMMITIZEN_BUMP_YES=false to enable confirmations,
        and TASK_COMMITIZEN_BUMP_CHECK_CONSISTENCY=false to skip consistency checks if needed.
        Set TASK_COMMITIZEN_BUMP_NO_RAISE to a comma-separated list of error codes to ignore specific errors,
        e.g., TASK_COMMITIZEN_BUMP_NO_RAISE=21 to ignore the "Nothing to commit" error.
        Use TASK_COMMITIZEN_BUMP_PRERELEASE and TASK_COMMITIZEN_BUMP_DEV_RELEASE for managing pre-releases and development versions.
    vars:
      BUMP_OPTIONS:
        sh: |
          options=(
            {{if eq .TASK_COMMITIZEN_BUMP_YES "true"}}"--yes"{{end}}
            {{if eq .TASK_COMMITIZEN_BUMP_DRY_RUN "true"}}"--dry-run"{{end}}
            {{if eq .TASK_COMMITIZEN_BUMP_CHECK_CONSISTENCY "true"}}"--check-consistency"{{end}}
            {{if eq .TASK_COMMITIZEN_BUMP_CHANGELOG "true"}}"--changelog"{{end}}
          )

          if [[ "{{.TASK_COMMITIZEN_GIT_CURRENT_BRANCH}}" =~ {{.TASK_COMMITIZEN_RELEASE_BRANCH_PATTERN}} ]] || [ -n "{{.TASK_COMMITIZEN_BUMP_PRERELEASE}}" ]; then
            options+=("--prerelease")
          elif [[ "{{.TASK_COMMITIZEN_GIT_CURRENT_BRANCH}}" != "{{.TASK_COMMITIZEN_DEFAULT_BRANCH}}" ]] || [ -n "{{.TASK_COMMITIZEN_BUMP_DEV_RELEASE}}" ]; then
            options+=("--devrelease" "$(date +%Y%m%d%H%M%S)")
          fi

          echo "${options[@]}"
      CLI_OPTIONS:
        sh: |
          options=({{.TASK_COMMITIZEN_CLI_OPTS}})
          if [ -n "{{.TASK_COMMITIZEN_BUMP_NO_RAISE}}" ]; then
            options+=("--no-raise" "{{.TASK_COMMITIZEN_BUMP_NO_RAISE}}")
          fi
          echo "${options[@]}"
      COMMITIZEN_BUMP_COMMAND:
        sh: echo "uvx --from {{.TASK_COMMITIZEN_VERSION}} cz --config {{.TASK_COMMITIZEN_CONFIG_FULL_PATH}} {{.CLI_OPTIONS}} bump {{.BUMP_OPTIONS}}"
    status:
      - test "{{.TASK_COMMITIZEN_ENABLED}}" = "false"
    cmds:
      - cmd: echo "üîÑ Running Commitizen version bump"
        silent: true
      - cmd: echo "{{.COMMITIZEN_BUMP_COMMAND}}"
        silent: true
      - cmd: |
          if {{.COMMITIZEN_BUMP_COMMAND}}; then
            echo "üéâ All commits successfully verified with Commitizen!"
          else
            exit_code=$?
            if [ $exit_code -eq 3 ]; then
              echo "‚ö†Ô∏è  Warning: No commits found in the specified range to verify."
            else
              echo "‚ùå Commitizen bump failed with exit code $exit_code"
              exit $exit_code
            fi
          fi
        silent: true
      - cmd: |
          if [ "{{.TASK_COMMITIZEN_BUMP_DRY_RUN}}" = "true" ]; then
            echo "Info : Version bump completed in dry-run mode. No changes were applied."
          else
            echo "üéâ Version bump completed successfully!"
          fi
        silent: true
      - cmd: echo 'üéâ Commitizen version bump process completed.'
        silent: true

  check-message:
    desc: Check a specific commit message file using Commitizen (for commit-msg hook).
    summary: |
      ‚ÑπÔ∏è Description:
        Runs 'cz check --commit-msg-file' on a specific file provided as an argument.
        This is intended for use with the git commit-msg hook.

      üîß Arguments:
        - COMMIT_MSG_FILE: Path to the commit message file (passed to the task).

      üîÑ Execution:
        Runs Commitizen check on the specified file.
    vars:
      TASK_COMMITIZEN_COMMAND: "uvx --from {{.TASK_COMMITIZEN_VERSION}} cz check --commit-msg-file {{.COMMIT_MSG_FILE}}"
      _RED: '{{.RED | default "\033[0;31m"}}'
      _GREEN: '{{.GREEN | default "\033[0;32m"}}'
      _NC: '{{.NC | default "\033[0m"}}'
    cmds:
      - cmd: echo "üîÑ Checking commit message file {{.COMMIT_MSG_FILE}} with Commitizen"
        silent: true
      - cmd: |
          # Run cz check and capture the exit status
          if ! {{.TASK_COMMITIZEN_COMMAND}}; then
            echo -e "{{._RED}}‚ùå Commitizen check failed. Please fix the message in your editor or use 'git commit --amend'.{{.NC}}"
            exit 1
          fi
      - cmd: echo 'üéâ Commit message passed Commitizen checks.'
        silent: true
