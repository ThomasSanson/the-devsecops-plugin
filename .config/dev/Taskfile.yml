---
version: "3"

vars:
  TASK_DEV_ENABLED: '{{.TASK_DEV_ENABLED | default "true"}}'
  # Initialization Variables
  TASK_DEV_INIT_PROJECT_DIR: '{{.TASK_DEV_INIT_PROJECT_DIR | default "."}}'
  TASK_DEV_INIT_OWNER: '{{.TASK_DEV_INIT_OWNER | default "$USER:$USER" }}' # Format UID:GID, using shell command as default
  TASK_DEV_INIT_DEPLOY_KEY_PATH: '{{.TASK_DEV_INIT_DEPLOY_KEY_PATH | default ""}}'
  TASK_DEV_INIT_GIT_SERVER_HOST: '{{.TASK_DEV_INIT_GIT_SERVER_HOST | default ""}}'
  TASK_DEV_INIT_GIT_USER_NAME: '{{.TASK_DEV_INIT_GIT_USER_NAME | default ""}}'
  TASK_DEV_INIT_GIT_USER_EMAIL: '{{.TASK_DEV_INIT_GIT_USER_EMAIL | default ""}}'

tasks:
  init:
    desc: "Run all CI/CD initialization steps (git config, permissions, ssh)"
    cmds:
      - cmd: echo "ðŸ”„ Starting development environment initialisation"
        silent: true
      - task: setup-git-security
      - task: setup-permissions
      - task: setup-ssh
      - task: setup-git-config
      - task: fetch-git-data
      - cmd: echo "ðŸŽ‰ Development environment initialisation completed successfully"
        silent: true

  setup-environment:
    alias: "default"
    desc: Configure the development environment.
    cmds:
      - cmd: echo "ðŸ”„ Starting development environment setup"
        silent: true
      - task: bun
      - task: docker-ce
      - task: go
      - task: helm
      - task: k3d
      - task: kubectl
      - task: kubeseal
      - task: lefthook
      - task: nodejs
      - task: podman
      - cmd: echo "ðŸŽ‰ Development environment setup completed successfully"
        silent: true

  up:
    cmds:
      - cmd: echo "ðŸ”„ Starting project launch sequence"
        silent: true
      - task: setup-environment
      - task: :deploy
      - cmd: echo "=> Run 'task dev:reset to destroy and cleanup"
        silent: true
      - cmd: echo "ðŸŽ‰ Project launch sequence completed successfully"
        silent: true

  reset:
    cmds:
      - cmd: echo "ðŸ”„ Starting development environment reset"
        silent: true
      - task: :devsecops:test:teardown:infrastructure
      - cmd: echo "ðŸŽ‰ Development environment reset completed successfully"
        silent: true

  bun:
    internal: true
    status:
      - test "{{.TASK_BUN_ENABLED}}" = "false"
    cmds:
      - task: :bun:install

  docker-ce:
    internal: true
    status:
      - test "{{.TASK_DOCKER_CE_ENABLED}}" = "false"
    cmds:
      - task: :docker-ce:install

  go:
    internal: true
    status:
      - test "{{.TASK_GO_ENABLED}}" = "false"
    cmds:
      - task: :go:install

  helm:
    internal: true
    status:
      - test "{{.TASK_HELM_ENABLED}}" = "false"
    cmds:
      - task: :helm:install

  k3d:
    internal: true
    status:
      - test "{{.TASK_K3D_ENABLED}}" = "false"
    cmds:
      - task: :k3d:install

  kubectl:
    internal: true
    status:
      - test "{{.TASK_KUBECTL_ENABLED}}" = "false"
    cmds:
      - task: :kubectl:install

  kubeseal:
    internal: true
    status:
      - test "{{.TASK_KUBESEAL_ENABLED}}" = "false"
    cmds:
      - task: :kubeseal:install

  lefthook:
    internal: true
    status:
      - test "{{.TASK_LEFTHOOK_ENABLED}}" = "false"
    cmds:
      - task: :lefthook:lefthook:install

  nodejs:
    internal: true
    status:
      - test "{{.TASK_NODEJS_ENABLED}}" = "false"
    cmds:
      - task: :nodejs:install

  podman:
    internal: true
    status:
      - test "{{.TASK_PODMAN_ENABLED}}" = "false"
    cmds:
      - task: :podman:install

  # --- Initialization Sub-Tasks ---

  setup-git-security:
    internal: true
    desc: "Configure git safe directory"
    cmds:
      - cmd: echo "ðŸ”„ Starting git safe directory configuration"
        silent: true
      - git config --global --add safe.directory "{{.TASK_DEV_INIT_PROJECT_DIR}}"
      - cmd: echo "ðŸŽ‰ Git safe directory configuration completed successfully"
        silent: true

  setup-permissions:
    internal: true
    desc: "Set ownership and permissions for the project directory"
    cmds:
      - cmd: echo "ðŸ”„ Starting project directory permissions setup"
        silent: true
      - |
        if command -v sudo >/dev/null 2>&1; then
          echo "INFO: Setting ownership to {{.TASK_DEV_INIT_OWNER}} for {{.TASK_DEV_INIT_PROJECT_DIR}}"
          sudo chown -R {{.TASK_DEV_INIT_OWNER}} {{.TASK_DEV_INIT_PROJECT_DIR}}
          echo "INFO: Setting permissions for {{.TASK_DEV_INIT_PROJECT_DIR}}"
          sudo chmod -R u+rw {{.TASK_DEV_INIT_PROJECT_DIR}}
        else
          echo "WARN: sudo not found. Skipping permission setup."
        fi
      - cmd: echo "ðŸŽ‰ Project directory permissions setup completed successfully"
        silent: true

  setup-ssh:
    internal: true
    desc: "Configure SSH agent, keys, and known hosts"
    cmds:
      - cmd: echo "ðŸ”„ Starting SSH configuration"
        silent: true
      - | # Combine agent start, key adding, and host key scan into one script
        eval $(ssh-agent -s)
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        # Check if the variable is defined and points to an existing file
        if [ -n "{{.TASK_DEV_INIT_DEPLOY_KEY_PATH}}" ] && [ -f "{{.TASK_DEV_INIT_DEPLOY_KEY_PATH}}" ]; then
          echo "INFO: Using SSH key from variable located at: {{.TASK_DEV_INIT_DEPLOY_KEY_PATH}}"
          # Copy the key file provided by GitLab CI to the standard location
          cp "{{.TASK_DEV_INIT_DEPLOY_KEY_PATH}}" ~/.ssh/id_rsa
          # Set correct permissions
          chmod 600 ~/.ssh/id_rsa

          # Add the key to the ssh-agent (now in the same shell context)
          ssh-add ~/.ssh/id_rsa
          echo "INFO: SSH Key added to agent. Listing keys:"
          ssh-add -l # Verify key was added
        else
          # Add a check to differentiate between undefined variable and non-existent file path
          if [ -z "{{.TASK_DEV_INIT_DEPLOY_KEY_PATH}}" ]; then
            echo "WARN: TASK_DEV_INIT_DEPLOY_KEY_PATH variable is not defined. Skipping SSH key setup."
          else
            echo "ERROR: TASK_DEV_INIT_DEPLOY_KEY_PATH is defined but does not point to a valid file: {{.TASK_DEV_INIT_DEPLOY_KEY_PATH}}" >&2
            # Consider failing the job if the key is mandatory
            # exit 1
          fi
          echo "WARN: Skipping SSH key setup."
        fi
        # Disable strict host key checking if inside Docker, otherwise rely on known_hosts
        [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        # Add Git server host key to known_hosts
        if [ -n "{{.TASK_DEV_INIT_GIT_SERVER_HOST}}" ]; then
          echo "INFO: Adding {{.TASK_DEV_INIT_GIT_SERVER_HOST}} to known_hosts"
          ssh-keyscan {{.TASK_DEV_INIT_GIT_SERVER_HOST}} >> ~/.ssh/known_hosts
        else
          echo "WARN: TASK_DEV_INIT_GIT_SERVER_HOST is not defined. Skipping ssh-keyscan."
        fi
      - cmd: echo "ðŸŽ‰ SSH configuration completed successfully"
        silent: true

  setup-git-config:
    internal: true
    desc: "Configure local git user name and email"
    cmds:
      - cmd: echo "ðŸ”„ Starting git user configuration"
        silent: true
      - |
        git config --local user.name "{{.TASK_DEV_INIT_GIT_USER_NAME}}"
        git config --local user.email "{{.TASK_DEV_INIT_GIT_USER_EMAIL}}"
        git config --local pull.rebase true
        echo "Git name: $(git config --get user.name)"
        echo "Git email: $(git config --get user.email)"
      - cmd: echo "ðŸŽ‰ Git user configuration completed successfully"
        silent: true

  fetch-git-data:
    internal: true
    desc: "Fetch all git data including tags"
    cmds:
      - cmd: echo "ðŸ”„ Starting git data fetch"
        silent: true
      - git fetch --all && git fetch --tags && git fetch origin --tags
      - cmd: echo "ðŸŽ‰ Git data fetch completed successfully"
        silent: true
