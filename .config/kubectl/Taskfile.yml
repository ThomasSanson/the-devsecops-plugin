---
version: "3"

vars:
  TASK_KUBECTL_ENABLED: '{{.TASK_KUBECTL_ENABLED | default "false"}}'
  TASK_KUBECTL_VENV_DIR: '{{.TASK_KUBECTL_VENV_DIR | default "./venv/kubectl"}}'
  TASK_KUBECTL_ANSIBLE_CMD: '{{.TASK_KUBECTL_ANSIBLE_CMD | default "./venv/kubectl/bin/ansible-playbook"}}'
  TASK_KUBECTL_ANSIBLE_GALAXY_CMD: '{{.TASK_KUBECTL_ANSIBLE_GALAXY_CMD | default "./venv/kubectl/bin/ansible-galaxy"}}'
  TASK_KUBECTL_ANSIBLE_REQUIREMENTS_FILE: '{{.TASK_KUBECTL_ANSIBLE_REQUIREMENTS_FILE | default ".config/kubectl/requirements.txt"}}'
  TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE: '{{.TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE | default ".config/kubectl/playbook.yml"}}'
  TASK_KUBECTL_PYTHON_VERSION_FILE: '{{.TASK_KUBECTL_PYTHON_VERSION_FILE | default ".config/python/.python-version"}}'
  TASK_KUBECTL_ANSIBLE_INVENTORY_TARGET: "localhost" # DevSkim: ignore DS162092
  TASK_KUBECTL_VERSION: '{{.TASK_KUBECTL_VERSION | default "v1.32.0"}}'
  TASK_KUBECTL_KUBECONFIG: '{{.TASK_KUBECTL_VERSION | default ""}}'

env:
  LANG: "C.UTF-8"
  LC_ALL: "C.UTF-8"
  LANGUAGE: "C.UTF-8"

tasks:
  install:dependencies:
    desc: |
      ‚ÑπÔ∏è Description:
        Sets up Ansible and its dependencies in a dedicated virtual environment

      üîß Variables:
        - TASK_KUBECTL_VENV_DIR: Virtual environment location
        - TASK_KUBECTL_ANSIBLE_REQUIREMENTS_FILE: Dependencies file path

      üîê Preconditions:
        - Python 3.x must be installed
        - Internet connectivity required

      üîÑ Execution:
        Creates virtualenv and installs required packages
    deps: [cleanup]
    preconditions:
      - sh: "command -v python3 >/dev/null 2>&1"
        msg: "‚ùå Python 3 is not installed"
      - sh: "test -f {{.TASK_KUBECTL_PYTHON_VERSION_FILE}}"
        msg: "‚ùå Python version file not found at {{.TASK_KUBECTL_PYTHON_VERSION_FILE}}"
      - sh: "test -f {{.TASK_KUBECTL_ANSIBLE_REQUIREMENTS_FILE}}"
        msg: "‚ùå Requirements file not found at {{.TASK_KUBECTL_ANSIBLE_REQUIREMENTS_FILE}}"
    cmds:
      - cmd: echo "üîÑ Starting install dependencies phase"
        silent: true
      - python$(cut -d '=' -f 2 {{.TASK_KUBECTL_PYTHON_VERSION_FILE}}) -m venv {{.TASK_KUBECTL_VENV_DIR}}
      - "{{.TASK_KUBECTL_VENV_DIR}}/bin/pip install -r {{.TASK_KUBECTL_ANSIBLE_REQUIREMENTS_FILE}}"
      - cmd: echo "üéâ Install dependencies phase completed successfully"
        silent: true

  install:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs kubectl using Ansible automation

      üîß Variables:
        - TASK_KUBECTL_ANSIBLE_CMD: Ansible command path
        - TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE: Ansible playbook location
        - TASK_KUBECTL_VERSION: Version of kubectl to install

      üîê Preconditions:
        - Dependencies must be installed

      üîÑ Execution:
        Runs Ansible playbook for kubectl installation
    status:
      - command -v kubectl &> /dev/null
    preconditions:
      - sh: "test -f {{.TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE}}"
        msg: "‚ùå Playbook file not found at {{.TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE}}"
    cmds:
      - cmd: echo "üîÑ Starting kubectl installation phase"
        silent: true
      - task: install:dependencies
      - |
        {{.TASK_KUBECTL_ANSIBLE_CMD}} \
          -i {{.TASK_KUBECTL_ANSIBLE_INVENTORY_TARGET}}, \
          -e "kubectl_version={{.TASK_KUBECTL_VERSION}}" \
          {{.TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE}}
      - task: cleanup
      - cmd: echo "üéâ Kubectl installation phase completed successfully"
        silent: true

  cleanup:
    desc: Removes temporary files and directories
    cmds:
      - cmd: echo "üîÑ Starting cleanup phase"
        silent: true
      - cmd: rm -rf {{.TASK_KUBECTL_VENV_DIR}}
        ignore_error: true
      - cmd: echo "üéâ Cleanup phase completed successfully"
        silent: true

  port-forward:
    desc: Port-forward a Kubernetes service to localhost # DevSkim: ignore DS162092
    cmds:
      - cmd: echo "üîÑ Starting port-forward phase"
        silent: true
      - cmd: echo "üîÑ Stopping existing port-forwards..."
        silent: true
      - pkill -f "kubectl.*port-forward.*svc/{{.SERVICE_NAME}}" || true
      - cmd: echo "üîÑ Starting port-forward for service '{{.SERVICE_NAME}}'..."
        silent: true
      - bash -c "kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} port-forward svc/{{.SERVICE_NAME}} {{.LOCAL_PORT}}:{{.REMOTE_PORT}} -n {{.NAMESPACE | default "default"}} > /dev/null 2>&1 &"
      - cmd: echo "üåê Open http://localhost:{{.LOCAL_PORT}} in your browser" # DevSkim: ignore DS162092
        silent: true
      - cmd: echo "üéâ Port-forward phase completed successfully"
        silent: true

  status:pods:
    desc: V√©rifie l'√©tat de tous les pods dans tous les namespaces en utilisant la configuration kubeconfig sp√©cifi√©e par l'environnement.
    cmds:
      - cmd: echo "üîÑ V√©rification de l'√©tat des pods pour l'environnement '{{.ENV | default "testing"}}'..."
        silent: true
      - kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} get pods -A
      - cmd: echo "üéâ V√©rification de l'√©tat des pods termin√©e."
        silent: true

  logs:errors:
    desc: Affiche les logs des pods en √©tat 'Error' ou 'CrashLoopBackOff'.
    cmds:
      - cmd: echo "üîÑ Recherche des pods en erreur pour l'environnement '{{.ENV | default "testing"}}'..."
        silent: true
      - |
        PODS=$(kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} get pods -A --no-headers | awk '$4 == "Error" || $4 == "CrashLoopBackOff" {print $1 "/" $2}')
        if [ -z "$PODS" ]; then
          echo "‚úÖ Aucun pod en √©tat Error ou CrashLoopBackOff trouv√©."
        else
          echo "üî• Pods en erreur trouv√©s. Affichage des logs (50 derni√®res lignes) :"
          for pod_id in $PODS; do
            namespace=$(echo "$pod_id" | cut -d'/' -f1)
            pod_name=$(echo "$pod_id" | cut -d'/' -f2)
            echo "--- Logs for $pod_id ---"
            kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} logs "$pod_name" -n "$namespace" --tail=50 || echo "   (Impossible de r√©cup√©rer les logs pour $pod_id)"
          done
        fi
      - cmd: echo "üéâ V√©rification des logs des pods en erreur termin√©e."
        silent: true

  troubleshoot:start:
    desc: "[Organigramme √âtape 1] V√©rifie le statut g√©n√©ral des pods. Lancez ceci pour commencer le d√©pannage."
    cmds:
      - task: status:pods

  troubleshoot:pod:describe:
    desc: |-
      [Organigramme] Affiche les d√©tails et √©v√©nements d'un pod sp√©cifique.
      Utilisez ceci si un pod est 'Pending', 'Not Ready', 'ImagePullBackOff', ou 'CrashLoopBackOff'.
      Usage: task kubectl:troubleshoot:pod:describe -- <nom-du-pod> [-n <namespace>]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "‚ùå Erreur: Nom du pod manquant. Usage: task kubectl:troubleshoot:pod:describe -- <nom-du-pod> [-n <namespace>]"
          exit 1
        fi
        echo "üîç Affichage des d√©tails pour le pod '{{.CLI_ARGS}}' dans l'environnement '{{.ENV | default "testing"}}'..."
        kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} describe pod {{.CLI_ARGS}}

  troubleshoot:pod:logs:
    desc: |-
      [Organigramme] Affiche les logs actuels d'un pod sp√©cifique.
      Utilisez ceci si un pod est 'Running' mais que l'application a des probl√®mes.
      Usage: task kubectl:troubleshoot:pod:logs -- <nom-du-pod> [-n <namespace>] [--tail=N]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "‚ùå Erreur: Nom du pod manquant. Usage: task kubectl:troubleshoot:pod:logs -- <nom-du-pod> [-n <namespace>]"
          exit 1
        fi
        echo "üìú Affichage des logs pour le pod '{{.CLI_ARGS}}' dans l'environnement '{{.ENV | default "testing"}}'..."
        kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} logs {{.CLI_ARGS}}

  troubleshoot:pod:logs:previous:
    desc: |-
      [Organigramme] Affiche les logs du conteneur pr√©c√©dent (s'il a red√©marr√©/crash√©).
      Usage: task kubectl:troubleshoot:pod:logs:previous -- <nom-du-pod> [-n <namespace>]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "‚ùå Erreur: Nom du pod manquant. Usage: task kubectl:troubleshoot:pod:logs:previous -- <nom-du-pod> [-n <namespace>]"
          exit 1
        fi
        echo "üìú Affichage des logs pr√©c√©dents pour le pod '{{.CLI_ARGS}}' dans l'environnement '{{.ENV | default "testing"}}'..."
        kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} logs --previous {{.CLI_ARGS}}

  troubleshoot:pods:node:
    desc: "[Organigramme] V√©rifie sur quels n≈ìuds les pods sont assign√©s."
    cmds:
      - echo "üó∫Ô∏è  V√©rification de l'assignation des pods aux n≈ìuds pour l'environnement '{{.ENV | default "testing"}}'..."
      - kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} get pods -A -o wide

  troubleshoot:pods:describe:problems:
    desc: "[Organigramme] D√©crit automatiquement TOUS les pods qui ne sont PAS 'Running' ou 'Completed'."
    cmds:
      - cmd: echo "üîÑ Recherche des pods non-sains ('Pending', 'Error', 'CrashLoop...', '0/X Ready', etc.) pour l'environnement '{{.ENV | default "testing"}}'..."
        silent: true
      - |
        KUBECONFIG_PATH="{{.TASK_KUBECTL_KUBECONFIG}}"
        # Ensure the path is canonical
        # KUBECONFIG_PATH=$(realpath "$KUBECONFIG_PATH") # Reverted this change

        PROBLEMATIC_PODS=$(kubectl --kubeconfig "$KUBECONFIG_PATH" get pods -A --no-headers | awk '$4 != "Running" && $4 != "Completed" {print $1 "/" $2}')
        if [ -z "$PROBLEMATIC_PODS" ]; then
          echo "‚úÖ Aucun pod dans un √©tat non-sain trouv√©."
        else
          echo "üî• Pods non-sains trouv√©s. Affichage des d√©tails ('describe') pour chacun :"
          for pod_id in $PROBLEMATIC_PODS; do
            namespace=$(echo "$pod_id" | cut -d'/' -f1)
            pod_name=$(echo "$pod_id" | cut -d'/' -f2)
            echo "--- Describe for $pod_id ---"
            kubectl --kubeconfig "$KUBECONFIG_PATH" describe pod "$pod_name" -n "$namespace"
            echo "---------------------------"
          done
        fi
      - cmd: echo "üéâ V√©rification des pods non-sains termin√©e."
        silent: true

  debug:
    desc: "Lance une s√©quence de t√¢ches de d√©pannage pour les pods."
    cmds:
      - cmd: echo "== √âtape 1 Statut G√©n√©ral des Pods =="
        silent: true
      - task: troubleshoot:start
      - cmd: echo "\n== √âtape 2 Description des Pods Non-Sains =="
        silent: true
      - task: troubleshoot:pods:describe:problems
      - cmd: echo "\n== √âtape 3 Logs des Pods en Erreur =="
        silent: true
      - task: logs:errors
      - cmd: echo "\n== √âtape 4 Assignation des Pods aux N≈ìuds =="
        silent: true
      - task: troubleshoot:pods:node
      - cmd: echo "\nüèÅ S√©quence de d√©bogage des pods termin√©e."
        silent: true
