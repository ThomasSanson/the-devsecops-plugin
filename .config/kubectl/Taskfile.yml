---
version: "3"

vars:
  TASK_KUBECTL_ENABLED: '{{.TASK_KUBECTL_ENABLED | default "false"}}'
  TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE: '{{.TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE | default ".config/kubectl/playbook.yml"}}'
  TASK_KUBECTL_ANSIBLE_INVENTORY_TARGET: "localhost" # DevSkim: ignore DS162092
  TASK_KUBECTL_VERSION: '{{.TASK_KUBECTL_VERSION | default "v1.32.0"}}'
  TASK_KUBECTL_KUBECONFIG: '{{.TASK_KUBECTL_VERSION | default ""}}'

env:
  LANG: "C.UTF-8"
  LC_ALL: "C.UTF-8"
  LANGUAGE: "C.UTF-8"

tasks:
  install:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs kubectl using Ansible automation

      üîß Variables:
        - TASK_KUBECTL_ANSIBLE_CMD: Ansible command path
        - TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE: Ansible playbook location
        - TASK_KUBECTL_VERSION: Version of kubectl to install

      üîê Preconditions:
        - Dependencies must be installed

      üîÑ Execution:
        Runs Ansible playbook for kubectl installation
    status:
      - command -v kubectl &> /dev/null
    preconditions:
      - sh: "test -f {{.TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE}}"
        msg: "‚ùå Playbook file not found at {{.TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE}}"
    cmds:
      - cmd: echo "üîÑ Starting kubectl installation phase"
        silent: true
      - |
        {{.TASK_ANSIBLE_COMMAND}} ansible-playbook \
          -i {{.TASK_KUBECTL_ANSIBLE_INVENTORY_TARGET}}, \
          -e "kubectl_version={{.TASK_KUBECTL_VERSION}}" \
          {{.TASK_KUBECTL_ANSIBLE_PLAYBOOK_FILE}}
      - task: cleanup
      - cmd: echo "üéâ Kubectl installation phase completed successfully"
        silent: true

  cleanup:
    desc: Removes temporary files and directories
    cmds:
      - cmd: echo "üîÑ Starting cleanup phase"
        silent: true
      - cmd: rm -rf {{.TASK_KUBECTL_VENV_DIR}}
        ignore_error: true
      - cmd: echo "üéâ Cleanup phase completed successfully"
        silent: true

  port-forward:
    desc: Port-forward a Kubernetes service to localhost # DevSkim: ignore DS162092
    cmds:
      - cmd: echo "üîÑ Starting port-forward phase"
        silent: true
      - cmd: echo "üîÑ Stopping existing port-forwards..."
        silent: true
      - pkill -f "kubectl.*port-forward.*svc/{{.SERVICE_NAME}}" || true
      - cmd: echo "üîÑ Starting port-forward for service '{{.SERVICE_NAME}}'..."
        silent: true
      - bash -c "kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} port-forward svc/{{.SERVICE_NAME}} {{.LOCAL_PORT}}:{{.REMOTE_PORT}} -n {{.NAMESPACE | default "default"}} > /dev/null 2>&1 &"
      - cmd: echo "üåê Open http://localhost:{{.LOCAL_PORT}} in your browser" # DevSkim: ignore DS162092
        silent: true
      - cmd: echo "üéâ Port-forward phase completed successfully"
        silent: true

  status:pods:
    desc: Checks the status of all pods in all namespaces using the kubeconfig specified by the environment.
    cmds:
      - cmd: echo "üîÑ Checking pod status for environment '{{.ENV | default "testing"}}'..."
        silent: true
      - kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} get pods -A
      - cmd: echo "üéâ Pod status check completed."
        silent: true

  logs:errors:
    desc: Displays logs for pods in 'Error' or 'CrashLoopBackOff' state.
    cmds:
      - cmd: echo "üîÑ Searching for error pods in environment '{{.ENV | default "testing"}}'..."
        silent: true
      - |
        PODS=$(kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} get pods -A --no-headers | awk '$4 == "Error" || $4 == "CrashLoopBackOff" {print $1 "/" $2}')
        if [ -z "$PODS" ]; then
          echo "‚úÖ No pods in Error or CrashLoopBackOff state found."
        else
          echo "üî• Error pods found. Displaying logs (last 50 lines):"
          for pod_id in $PODS; do
            namespace=$(echo "$pod_id" | cut -d'/' -f1)
            pod_name=$(echo "$pod_id" | cut -d'/' -f2)
            echo "--- Logs for $pod_id ---"
            kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} logs "$pod_name" -n "$namespace" --tail=50 || echo "   (Unable to retrieve logs for $pod_id)"
          done
        fi
      - cmd: echo "üéâ Error pod logs check completed."
        silent: true

  troubleshoot:start:
    desc: "[Flowchart Step 1] Checks the general status of pods. Run this to start troubleshooting."
    cmds:
      - task: status:pods

  troubleshoot:pod:describe:
    desc: |-
      [Flowchart] Shows details and events for a specific pod.
      Use this if a pod is 'Pending', 'Not Ready', 'ImagePullBackOff', or 'CrashLoopBackOff'.
      Usage: task kubectl:troubleshoot:pod:describe -- <pod-name> [-n <namespace>]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "‚ùå Error: Pod name missing. Usage: task kubectl:troubleshoot:pod:describe -- <pod-name> [-n <namespace>]"
          exit 1
        fi
        echo "üîç Displaying details for pod '{{.CLI_ARGS}}' in environment '{{.ENV | default "testing"}}'..."
        kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} describe pod {{.CLI_ARGS}}

  troubleshoot:pod:logs:
    desc: |-
      [Flowchart] Shows current logs for a specific pod.
      Use this if a pod is 'Running' but the application has issues.
      Usage: task kubectl:troubleshoot:pod:logs -- <pod-name> [-n <namespace>] [--tail=N]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "‚ùå Error: Pod name missing. Usage: task kubectl:troubleshoot:pod:logs -- <pod-name> [-n <namespace>]"
          exit 1
        fi
        echo "üìú Displaying logs for pod '{{.CLI_ARGS}}' in environment '{{.ENV | default "testing"}}'..."
        kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} logs {{.CLI_ARGS}}

  troubleshoot:pod:logs:previous:
    desc: |-
      [Flowchart] Shows logs from the previous container (if it restarted/crashed).
      Usage: task kubectl:troubleshoot:pod:logs:previous -- <pod-name> [-n <namespace>]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "‚ùå Error: Pod name missing. Usage: task kubectl:troubleshoot:pod:logs:previous -- <pod-name> [-n <namespace>]"
          exit 1
        fi
        echo "üìú Displaying previous logs for pod '{{.CLI_ARGS}}' in environment '{{.ENV | default "testing"}}'..."
        kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} logs --previous {{.CLI_ARGS}}

  troubleshoot:pods:node:
    desc: "[Flowchart] Checks which nodes the pods are assigned to."
    cmds:
      - echo "üó∫Ô∏è  Checking pod assignment to nodes for environment '{{.ENV | default "testing"}}'..."
      - kubectl --kubeconfig {{.TASK_KUBECTL_KUBECONFIG}} get pods -A -o wide

  troubleshoot:pods:describe:problems:
    desc: "[Flowchart] Automatically describes ALL pods that are NOT 'Running' or 'Completed'."
    cmds:
      - cmd: echo "üîÑ Searching for unhealthy pods ('Pending', 'Error', 'CrashLoop...', '0/X Ready', etc.) for environment '{{.ENV | default "testing"}}'..."
        silent: true
      - |
        KUBECONFIG_PATH="{{.TASK_KUBECTL_KUBECONFIG}}"
        # Ensure the path is canonical
        # KUBECONFIG_PATH=$(realpath "$KUBECONFIG_PATH") # Reverted this change

        PROBLEMATIC_PODS=$(kubectl --kubeconfig "$KUBECONFIG_PATH" get pods -A --no-headers | awk '$4 != "Running" && $4 != "Completed" {print $1 "/" $2}')
        if [ -z "$PROBLEMATIC_PODS" ]; then
          echo "‚úÖ No pods in an unhealthy state found."
        else
          echo "üî• Unhealthy pods found. Displaying details ('describe') for each:"
          for pod_id in $PROBLEMATIC_PODS; do
            namespace=$(echo "$pod_id" | cut -d'/' -f1)
            pod_name=$(echo "$pod_id" | cut -d'/' -f2)
            echo "--- Describe for $pod_id ---"
            kubectl --kubeconfig "$KUBECONFIG_PATH" describe pod "$pod_name" -n "$namespace"
            echo "---------------------------"
          done
        fi
      - cmd: echo "üéâ Unhealthy pods check completed."
        silent: true

  debug:
    desc: "Runs a sequence of troubleshooting tasks for pods."
    cmds:
      - cmd: echo "== Step 1 General Pod Status =="
        silent: true
      - task: troubleshoot:start
      - cmd: echo "\n== Step 2 Description of Unhealthy Pods =="
        silent: true
      - task: troubleshoot:pods:describe:problems
      - cmd: echo "\n== Step 3 Logs of Error Pods =="
        silent: true
      - task: logs:errors
      - cmd: echo "\n== Step 4 Pod Assignment to Nodes =="
        silent: true
      - task: troubleshoot:pods:node
      - cmd: echo "\nüèÅ Pod debugging sequence completed."
        silent: true
