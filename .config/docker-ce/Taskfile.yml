---
version: "3"

vars:
  TASK_DOCKER_CE_VENV_DIR: '{{.OVERRIDE_TASK_DOCKER_CE_VENV_DIR | default "./venv/docker-ce"}}'
  TASK_DOCKER_CE_ANSIBLE_CMD: '{{.OVERRIDE_TASK_DOCKER_CE_ANSIBLE_CMD | default "./venv/docker-ce/bin/ansible-playbook"}}'
  TASK_DOCKER_CE_ANSIBLE_GALAXY_CMD: '{{.OVERRIDE_TASK_DOCKER_CE_ANSIBLE_GALAXY_CMD | default "./venv/docker-ce/bin/ansible-galaxy"}}'
  TASK_DOCKER_CE_ANSIBLE_REQUIREMENTS_FILE: '{{.OVERRIDE_TASK_DOCKER_CE_ANSIBLE_REQUIREMENTS_FILE | default ".config/docker-ce/requirements.txt"}}'
  TASK_DOCKER_CE_ANSIBLE_ROLES_REQUIREMENTS: '{{.OVERRIDE_TASK_DOCKER_CE_ANSIBLE_ROLES_REQUIREMENTS | default ".config/docker-ce/requirements.yml"}}'
  TASK_DOCKER_CE_ANSIBLE_PLAYBOOK_FILE: '{{.OVERRIDE_TASK_DOCKER_CE_ANSIBLE_PLAYBOOK_FILE | default ".config/docker-ce/playbook.yml"}}'
  TASK_DOCKER_CE_PYTHON_VERSION_FILE: '{{.OVERRIDE_TASK_DOCKER_CE_PYTHON_VERSION_FILE | default ".config/python/.python-version"}}'
  TASK_DOCKER_CE_ANSIBLE_INVENTORY_TARGET: "localhost" # DevSkim: ignore DS162092

env:
  LANG: "C.UTF-8"
  LC_ALL: "C.UTF-8"
  LANGUAGE: "C.UTF-8"
  ANSIBLE_ROLES_PATH: ".config/docker-ce/roles"

includes:
  test:
    taskfile: tests/Taskfile.yml

tasks:
  install:dependencies:
    desc: |
      ‚ÑπÔ∏è Description:
        Sets up Ansible and its dependencies in a dedicated virtual environment

      üîß Variables:
        - TASK_DOCKER_CE_VENV_DIR: Virtual environment location
        - TASK_DOCKER_CE_ANSIBLE_REQUIREMENTS_FILE: Dependencies file path

      üîê Preconditions:
        - Python 3.x must be installed
        - Internet connectivity required

      üîÑ Execution:
        Creates virtualenv and installs required packages
    deps: [cleanup]
    preconditions:
      - sh: "command -v python3 >/dev/null 2>&1"
        msg: "‚ùå Python 3 is not installed"
      - sh: "test -f {{.TASK_DOCKER_CE_PYTHON_VERSION_FILE}}"
        msg: "‚ùå Python version file not found at {{.TASK_DOCKER_CE_PYTHON_VERSION_FILE}}"
      - sh: "test -f {{.TASK_DOCKER_CE_ANSIBLE_REQUIREMENTS_FILE}}"
        msg: "‚ùå Requirements file not found at {{.TASK_DOCKER_CE_ANSIBLE_REQUIREMENTS_FILE}}"
    cmds:
      - defer: { task: cleanup }
      - python$(cut -d '=' -f 2 {{.TASK_DOCKER_CE_PYTHON_VERSION_FILE}}) -m venv {{.TASK_DOCKER_CE_VENV_DIR}}
      - "{{.TASK_DOCKER_CE_VENV_DIR}}/bin/pip install -r {{.TASK_DOCKER_CE_ANSIBLE_REQUIREMENTS_FILE}}"
      - cmd: echo "‚úÖ Dependencies installed successfully"
        silent: true

  install:roles:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs required Ansible roles

      üîß Variables:
        - TASK_DOCKER_CE_ANSIBLE_GALAXY_CMD: Ansible Galaxy command path
        - TASK_DOCKER_CE_ANSIBLE_ROLES_REQUIREMENTS: Roles requirements file path

      üîê Preconditions:
        - Dependencies must be installed

      üîÑ Execution:
        Installs required Ansible roles
    deps: [install:dependencies]
    preconditions:
      - sh: "test -f {{.TASK_DOCKER_CE_ANSIBLE_ROLES_REQUIREMENTS}}"
        msg: "‚ùå Roles requirements file not found at {{.TASK_DOCKER_CE_ANSIBLE_ROLES_REQUIREMENTS}}"
    cmds:
      - mkdir -p .config/docker-ce/roles
      - "{{.TASK_DOCKER_CE_ANSIBLE_GALAXY_CMD}} install -r {{.TASK_DOCKER_CE_ANSIBLE_ROLES_REQUIREMENTS}} --roles-path .config/docker-ce/roles"
      - cmd: echo "‚úÖ Ansible roles installed successfully"
        silent: true

  install:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs Docker-CE using Ansible automation

      üîß Variables:
        - TASK_DOCKER_CE_ANSIBLE_CMD: Ansible command path
        - TASK_DOCKER_CE_ANSIBLE_PLAYBOOK_FILE: Ansible playbook location

      üîê Preconditions:
        - Dependencies must be installed
        - Roles must be installed

      üîÑ Execution:
        Runs Ansible playbook for Docker-CE installation
    status:
      - command -v docker &> /dev/null
    preconditions:
      - sh: "test -f {{.TASK_DOCKER_CE_ANSIBLE_PLAYBOOK_FILE}}"
        msg: "‚ùå Playbook file not found at {{.TASK_DOCKER_CE_ANSIBLE_PLAYBOOK_FILE}}"
    cmds:
      - defer: { task: cleanup }
      - task: install:roles
      - |
        {{.TASK_DOCKER_CE_ANSIBLE_CMD}} \
          -i {{.TASK_DOCKER_CE_ANSIBLE_INVENTORY_TARGET}}, \
          -c local \
          {{.TASK_DOCKER_CE_ANSIBLE_PLAYBOOK_FILE}} \
          -e 'ansible_python_interpreter=/usr/bin/python3'
      - cmd: echo "‚úÖ Docker-CE installed successfully"
        silent: true

  cleanup:
    desc: |
      ‚ÑπÔ∏è Description:
        Performs cleanup of temporary files and failed installations

      üîß Variables:
        - TASK_DOCKER_CE_VENV_DIR: Virtual environment to clean

      üîê Preconditions: None

      üîÑ Execution:
        Removes temporary files and partial installations
    internal: true
    cmds:
      - rm -rf {{.TASK_DOCKER_CE_VENV_DIR}}/*.tmp
      - rm -rf {{.TASK_DOCKER_CE_VENV_DIR}}/*.log
      - cmd: echo "‚úÖ Cleanup completed"
        silent: true

  build:all:dockerfile:
    desc: Build all Dockerfiles in the project.
    summary: |
      ‚ÑπÔ∏è Description:
        Searches for all Dockerfile in the project and attempts to build them.
        This task ensures that all Docker builds are functioning correctly.

      üîß Variables:
        DOCKERFILE_LIST: A list of all Dockerfile found in the project, excluding gitignored paths.

      üîê Preconditions:
        - Docker must be installed and running.
        - sha256sum must be installed.
        - git must be installed.

      üîÑ Execution:
        Iterates through each Dockerfile found and attempts to build it.

      üìù Note:
        This task is useful for verifying the integrity of all Dockerfile
        in the project. It does not push or deploy the built images.
    vars:
      DOCKERFILE_LIST:
        sh: git ls-files -c -o --exclude-standard | grep Dockerfile || true
    preconditions:
      - sh: command -v docker >/dev/null 2>&1
        msg: "‚ùå Docker is not installed or not in PATH. Please install Docker first."
      - sh: command -v sha256sum >/dev/null 2>&1
        msg: "‚ùå sha256sum is not installed or not in PATH. Please install sha256sum first."
      - sh: command -v git >/dev/null 2>&1
        msg: "‚ùå git is not installed or not in PATH. Please install git first."
    cmds:
      - defer: { task: cleanup }
      - for: { var: DOCKERFILE_LIST }
        cmd: |
          echo "Building Dockerfile: {{.ITEM}}"
          HASH=$(sha256sum {{.ITEM}} | cut -d' ' -f1)
          docker build -t test-build-${HASH} -f {{.ITEM}} .
