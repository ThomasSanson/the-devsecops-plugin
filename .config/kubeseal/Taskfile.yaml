---
version: "3"

vars:
  TASK_KUBESEAL_ENABLED: '{{.TASK_KUBESEAL_ENABLED | default "false"}}'
  TASK_KUBESEAL_VERSION: '{{.TASK_KUBESEAL_VERSION | default "v0.28.0"}}'
  TASK_KUBESEAL_ANSIBLE_PLAYBOOK_FILE: '{{.TASK_KUBESEAL_ANSIBLE_PLAYBOOK_FILE | default ".config/kubeseal/playbook.yml"}}'
  TASK_KUBESEAL_ANSIBLE_INVENTORY_TARGET: "localhost" # DevSkim: ignore DS162092
  TASK_KUBESEAL_NAMESPACE: '{{.TASK_KUBESEAL_NAMESPACE | default "kube-system"}}'
  TASK_KUBESEAL_CONTROLLER: '{{.TASK_KUBESEAL_CONTROLLER | default "sealed-secrets"}}'
  TASK_KUBESEAL_KUBECONFIG: '{{.TASK_KUBESEAL_KUBECONFIG | default ""}}'
  TASK_KUBESEAL_SECRETS_FILE: '{{.TASK_KUBESEAL_SECRETS_FILE | default ""}}'
  TASK_KUBESEAL_SEALED_FILE: '{{.TASK_KUBESEAL_SEALED_FILE | default ""}}'

env:
  LANG: "C.UTF-8"
  LC_ALL: "C.UTF-8"
  LANGUAGE: "C.UTF-8"

tasks:
  install:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs Kubeseal using Ansible automation

      üîß Variables:
        - TASK_KUBESEAL_ANSIBLE_CMD: Ansible command path
        - TASK_KUBESEAL_ANSIBLE_PLAYBOOK_FILE: Ansible playbook location
        - TASK_KUBESEAL_VERSION: Version of Kubeseal to install

      üîê Preconditions:
        - Dependencies must be installed

      üîÑ Execution:
        Runs Ansible playbook for Kubeseal installation
    status:
      - command -v kubeseal &> /dev/null
      - |
        CURRENT_VERSION=$(kubeseal --version 2>&1 | grep -oP 'kubeseal version: v\K[0-9]+\.[0-9]+\.[0-9]+')
        TARGET_VERSION=$(echo {{.TASK_KUBESEAL_VERSION}} | cut -c 2-)
        if [ "$CURRENT_VERSION" = "$TARGET_VERSION" ]; then
          exit 0
        fi
        exit 1
    preconditions:
      - sh: "test -f {{.TASK_KUBESEAL_ANSIBLE_PLAYBOOK_FILE}}"
        msg: "‚ùå Playbook file not found at {{.TASK_KUBESEAL_ANSIBLE_PLAYBOOK_FILE}}"
    cmds:
      - cmd: echo "üîÑ Starting kubeseal installation phase"
        silent: true
      - |
        {{.TASK_ANSIBLE_COMMAND}} ansible-playbook \
          -i {{.TASK_KUBESEAL_ANSIBLE_INVENTORY_TARGET}}, \
          -e "kubeseal_version={{.TASK_KUBESEAL_VERSION}}" \
          {{.TASK_KUBESEAL_ANSIBLE_PLAYBOOK_FILE}}
      - task: cleanup
      - cmd: echo "üéâ Kubeseal installation phase completed successfully"
        silent: true

  cleanup:
    desc: Removes temporary files and directories
    cmds:
      - cmd: echo "üîÑ Starting cleanup phase"
        silent: true
      - cmd: rm -rf {{.TASK_KUBESEAL_VENV_DIR}}
        ignore_error: true
      - cmd: echo "üéâ Cleanup phase completed successfully"
        silent: true

  validate:
    desc: |
      ‚ÑπÔ∏è Description:
        Validates the integrity and format of sealed secrets files.
        Ensures secrets are properly encrypted and compatible with the controller.

      üîß Variables:
        - TASK_KUBESEAL_KUBECONFIG: Path to kubeconfig file
        - TASK_KUBESEAL_SEALED_FILE: Path to sealed secrets file
        - TASK_KUBESEAL_NAMESPACE: Namespace where sealed-secrets is installed
        - TASK_KUBESEAL_CONTROLLER: Name of the sealed-secrets controller

      üîê Preconditions:
        - Sealed-secrets controller must be installed
        - Sealed secrets file must exist
    preconditions:
      - sh: "command -v kubeseal >/dev/null 2>&1"
        msg: "‚ùå Kubeseal is not installed"
      - sh: "test -f {{.TASK_KUBESEAL_SEALED_FILE}}"
        msg: "‚ùå Sealed secrets file not found at {{.TASK_KUBESEAL_SEALED_FILE}}"
    cmds:
      - cmd: echo "üîÑ Starting validate phase"
        silent: true
      - cmd: echo "üîç Validating sealed secrets format and integrity..."
        silent: true
      - |
        kubeseal --validate \
          --controller-namespace {{.TASK_KUBESEAL_NAMESPACE}} \
          --controller-name {{.TASK_KUBESEAL_CONTROLLER}} \
          --kubeconfig {{.TASK_KUBESEAL_KUBECONFIG}} \
          < {{.TASK_KUBESEAL_SEALED_FILE}}
      - cmd: echo "üéâ Validate phase completed successfully"
        silent: true

  seal:
    desc: |
      ‚ÑπÔ∏è Description:
        Encrypts Kubernetes secrets from cleartext into sealed secrets format.
        Implements secure handling with hash verification to prevent unnecessary resealing.

      üîß Variables:
        - TASK_KUBESEAL_KUBECONFIG: Path to kubeconfig file
        - TASK_KUBESEAL_SECRETS_FILE: Path to cleartext secrets file
        - TASK_KUBESEAL_SEALED_FILE: Path to store sealed secrets
        - TASK_KUBESEAL_NAMESPACE: Namespace where sealed-secrets is installed
        - TASK_KUBESEAL_CONTROLLER: Name of the sealed-secrets controller

      üîê Preconditions:
        - Sealed-secrets controller must be installed
        - Cleartext secrets file must exist

      üîí Security Measures:
        1. Validates input file existence
        2. Implements hash-based change detection
        3. Performs post-sealing validation
    preconditions:
      - sh: "command -v kubeseal >/dev/null 2>&1"
        msg: "‚ùå Kubeseal is not installed"
      - sh: "test -f {{.TASK_KUBESEAL_SECRETS_FILE}}"
        msg: "‚ùå Cleartext secrets file not found at {{.TASK_KUBESEAL_SECRETS_FILE}}"
    cmds:
      - cmd: echo "üîÑ Starting seal phase"
        silent: true
      - cmd: echo "üîç Performing initial verification..."
        silent: true
      - mkdir -p $(dirname {{.TASK_KUBESEAL_SEALED_FILE}})
      - cmd: echo "üîç Checking for changes in secrets..."
        silent: true
      - |
        CURRENT_HASH=$(sha256sum {{.TASK_KUBESEAL_SECRETS_FILE}} | cut -d' ' -f1)
        HASH_FILE="$(dirname {{.TASK_KUBESEAL_SEALED_FILE}})/.secrets.hash"

        if [ -f "$HASH_FILE" ]; then
          STORED_HASH=$(cat "$HASH_FILE")
        else
          STORED_HASH=""
        fi

        if [ "$CURRENT_HASH" != "$STORED_HASH" ]; then
          echo "üîÑ Changes detected in secrets file"
          echo "üîí Sealing secrets..."
          kubeseal --format yaml \
            --controller-namespace {{.TASK_KUBESEAL_NAMESPACE}} \
            --controller-name {{.TASK_KUBESEAL_CONTROLLER}} \
            --kubeconfig {{.TASK_KUBESEAL_KUBECONFIG}} \
            < {{.TASK_KUBESEAL_SECRETS_FILE}} > {{.TASK_KUBESEAL_SEALED_FILE}}

          echo "$CURRENT_HASH" > "$HASH_FILE"
        else
          echo "‚úÖ No changes detected in secrets file"
        fi
      - task: validate
      - cmd: echo "üéâ Seal phase completed successfully"
        silent: true
