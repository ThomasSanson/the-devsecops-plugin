---
version: "3"

vars:
  TASK_HELM_ENABLED: '{{.TASK_HELM_ENABLED | default "false"}}'
  TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS: '{{.TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS | default ".config/helm/requirements.yml"}}'
  TASK_HELM_ANSIBLE_PLAYBOOK_FILE: '{{.TASK_HELM_ANSIBLE_PLAYBOOK_FILE | default ".config/helm/playbook.yml"}}'
  TASK_HELM_ANSIBLE_INVENTORY_TARGET: "localhost" # DevSkim: ignore DS162092
  TASK_HELM_MAJOR_VERSION: '{{.TASK_HELM_MAJOR_VERSION | default "v3.17.1"}}'
  TASK_HELM_DIR: '{{.TASK_HELM_DIR | default ""}}'
  TASK_HELM_CLI_OPTS: '{{.TASK_HELM_CLI_OPTS | default ""}}'
  TASK_HELM_BUILD_DESTINATION: '{{.TASK_HELM_BUILD_DESTINATION | default ".cache/helm"}}'
  TASK_HELM_DEPENDENCY_UPDATE: '{{.TASK_HELM_DEPENDENCY_UPDATE | default "--dependency-update"}}'

env:
  LANG: "C.UTF-8"
  LC_ALL: "C.UTF-8"
  LANGUAGE: "C.UTF-8"
  ANSIBLE_ROLES_PATH: ".config/helm/roles"

tasks:
  install:roles:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs required Ansible roles

      üîß Variables:
        - TASK_HELM_ANSIBLE_GALAXY_CMD: Ansible Galaxy command path
        - TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS: Roles requirements file path

      üîê Preconditions:
        - Dependencies must be installed

      üîÑ Execution:
        Installs required Ansible roles
    preconditions:
      - sh: "test -f {{.TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS}}"
        msg: "‚ùå Roles requirements file not found at {{.TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS}}"
    cmds:
      - cmd: echo "üîÑ Starting install roles phase"
        silent: true
      - mkdir -p .config/helm/roles
      - "{{.TASK_ANSIBLE_COMMAND}} ansible-galaxy install -r {{.TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS}} --roles-path .config/helm/roles"
      - cmd: echo "üéâ Install roles phase completed successfully"
        silent: true

  install:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs Helm using Ansible automation

      üîß Variables:
        - TASK_HELM_ANSIBLE_CMD: Ansible command path
        - TASK_HELM_ANSIBLE_PLAYBOOK_FILE: Ansible playbook location
        - TASK_HELM_MAJOR_VERSION: Major version of Helm to install (default: 20.x)

      üîê Preconditions:
        - Dependencies must be installed
        - Roles must be installed

      üîÑ Execution:
        Runs Ansible playbook for Helm installation
    status:
      - command -v helm &> /dev/null
    preconditions:
      - sh: "test -f {{.TASK_HELM_ANSIBLE_PLAYBOOK_FILE}}"
        msg: "‚ùå Playbook file not found at {{.TASK_HELM_ANSIBLE_PLAYBOOK_FILE}}"
    cmds:
      - cmd: echo "üîÑ Starting helm installation phase"
        silent: true
      - defer: { task: cleanup }
      - task: install:roles
      - |
        {{.TASK_ANSIBLE_COMMAND}} ansible-playbook \
          -i {{.TASK_HELM_ANSIBLE_INVENTORY_TARGET}}, \
          -c local \
          -e "helm_version={{.TASK_HELM_MAJOR_VERSION}}" \
          {{.TASK_HELM_ANSIBLE_PLAYBOOK_FILE}}
      - cmd: echo "üéâ Helm installation phase completed successfully"
        silent: true

  cleanup:
    internal: true
    cmds:
      - cmd: echo "üîÑ Starting cleanup phase"
        silent: true
      - rm -rf .config/helm/roles
      - rm -rf {{.TASK_HELM_VENV_DIR}}
      - rm -rf {{.TASK_HELM_BUILD_DESTINATION}} || true
      - cmd: echo "üéâ Cleanup phase completed successfully"
        silent: true

  dependency:update:
    desc: |
      ‚ÑπÔ∏è Description:
        Update Helm dependencies defined in Chart.yaml

      üîß Variables:
        - TASK_HELM_DIR: Path to Helm charts directory
    deps: [install]
    sources:
      - "{{.TASK_HELM_DIR}}/Chart.yaml"
    generates:
      - "{{.TASK_HELM_DIR}}/Chart.lock"
    preconditions:
      - sh: test -f {{.TASK_HELM_DIR}}/Chart.yaml
        msg: ‚ùå Helm Chart.yaml not found at {{.TASK_HELM_DIR}}/Chart.yaml
    run: once
    cmds:
      - cmd: echo "üîÑ Starting dependency update phase"
        silent: true
      - helm dependency update {{.TASK_HELM_DIR}}
      - cmd: echo "üéâ Dependency update phase completed successfully"
        silent: true

  package:
    desc: |
      ‚ÑπÔ∏è Description:
        Universal Helm chart package task that converts the chart into a versioned archive

      üîß Variables:
        - TASK_HELM_DIR: Path to Helm charts directory
        - TASK_HELM_CLI_OPTS: Additional Helm CLI options (can be overridden with TASK_HELM_CLI_OPTS)
        - TASK_HELM_BUILD_DESTINATION: Destination directory for the built chart (default: .cache/helm)
        - TASK_HELM_DEPENDENCY_UPDATE: Option to update dependencies (default: --dependency-update)

      üîê Preconditions:
        - Helm must be installed
        - Chart.yaml must exist in the specified directory

      üîÑ Execution:
        - Creates package directory if it doesn't exist
        - Packages the Helm chart with dependency update
    deps: [install]
    preconditions:
      - sh: command -v helm >/dev/null 2>&1
        msg: "‚ùå Helm is not installed. Please run 'task helm:install' first."
      - sh: test -f {{.TASK_HELM_DIR}}/Chart.yaml
        msg: "‚ùå Helm Chart.yaml not found at {{.TASK_HELM_DIR}}/Chart.yaml"
    cmds:
      - cmd: echo "üîÑ Starting package phase"
        silent: true
      - mkdir -p {{.TASK_HELM_BUILD_DESTINATION}}
      - cmd: echo "üîß Building Helm chart from {{.TASK_HELM_DIR}} to {{.TASK_HELM_BUILD_DESTINATION}}..."
        silent: true
      - helm package {{.TASK_HELM_DIR}} --destination {{.TASK_HELM_BUILD_DESTINATION}} {{.TASK_HELM_DEPENDENCY_UPDATE}} {{.TASK_HELM_CLI_OPTS}}
      - cmd: echo "üéâ Build phase completed successfully"
        silent: true

  lint:
    desc: |
      ‚ÑπÔ∏è Description:
        Verifies the syntax of the Helm chart.

      üîß Variables:
        - TASK_HELM_DIR: Path to Helm charts directory

      üîê Preconditions:
        - Helm must be installed.
        - Chart.yaml must exist in the specified directory.

      üîÑ Execution:
        - Runs 'helm lint' on the specified chart directory.
    deps: [install]
    preconditions:
      - sh: command -v helm >/dev/null 2>&1
        msg: "‚ùå Helm is not installed. Please run 'task helm:install' first."
      - sh: test -f {{.TASK_HELM_DIR}}/Chart.yaml
        msg: "‚ùå Helm Chart.yaml not found at {{.TASK_HELM_DIR}}/Chart.yaml"
    cmds:
      - cmd: echo "üîÑ Starting lint phase"
        silent: true
      - |
        echo "Linting Helm chart in {{.TASK_HELM_DIR}}"
        helm lint "{{.TASK_HELM_DIR}}"
      - cmd: echo "üéâ Lint phase completed successfully"
        silent: true

  charts:sync:
    desc: |
      ‚ÑπÔ∏è Description:
        Synchronizes remote Helm repository charts and index locally

      üîß Variables:
        - TASK_HELM_BUILD_DESTINATION: Directory where packaged charts are stored
        - TASK_HELM_REPO_URL: Base URL for the Helm repository (default: "")

      üîê Preconditions:
        - Helm must be installed
    deps: [install]
    preconditions:
      - sh: command -v helm >/dev/null 2>&1
        msg: "‚ùå Helm is not installed. Please run 'task helm:install' first."
    cmds:
      - cmd: echo "üîÑ Starting charts sync phase"
        silent: true
      - |
        # Ensure the destination directory exists
        mkdir -p {{.TASK_HELM_BUILD_DESTINATION}}

        if [ -n "{{.TASK_HELM_REPO_URL}}" ]; then
          echo "üîß Downloading remote index.yaml from {{.TASK_HELM_REPO_URL}}..."
          curl -sfL "{{.TASK_HELM_REPO_URL}}/index.yaml" -o {{.TASK_HELM_BUILD_DESTINATION}}/index.yaml || echo "No remote index found"
          if [ -f "{{.TASK_HELM_BUILD_DESTINATION}}/index.yaml" ]; then
            grep 'https.*\.tgz' {{.TASK_HELM_BUILD_DESTINATION}}/index.yaml | sed 's/.*- //;s/^[ ]*//' | while read url; do
              fname=$(basename "$url")
              if [ ! -f "{{.TASK_HELM_BUILD_DESTINATION}}/$fname" ]; then
                echo "  ‚Üí Downloading $fname"
                curl -sfL "$url" -o "{{.TASK_HELM_BUILD_DESTINATION}}/$fname"
              fi
            done
          fi
        else
          echo "‚ö†Ô∏è  TASK_HELM_REPO_URL is not set, skipping remote chart synchronization."
        fi
      - cmd: echo "üéâ Charts sync phase completed successfully"
        silent: true

  repository:index:
    desc: |
      ‚ÑπÔ∏è Description:
        Creates or updates a Helm repository index file for charts

      üîß Variables:
        - TASK_HELM_BUILD_DESTINATION: Directory where packaged charts are stored
        - TASK_HELM_REPO_URL: Base URL for the Helm repository (default: "")

      üîê Preconditions:
        - Helm must be installed
        - Build destination must exist
    deps: [install]
    preconditions:
      - sh: command -v helm >/dev/null 2>&1
        msg: "‚ùå Helm is not installed. Please run 'task helm:install' first."
      - sh: test -d {{.TASK_HELM_BUILD_DESTINATION}}
        msg: "‚ùå Build destination not found at {{.TASK_HELM_BUILD_DESTINATION}}"
    cmds:
      - cmd: echo "üîÑ Starting repository index creation"
        silent: true
      - task: charts:sync
        vars:
          TASK_HELM_BUILD_DESTINATION: "{{.TASK_HELM_BUILD_DESTINATION}}"
      - |
        # Check if any .tgz files are present in the directory
        if [ $(find {{.TASK_HELM_BUILD_DESTINATION}} -name "*.tgz" | wc -l) -eq 0 ]; then
          echo "‚ö†Ô∏è No Helm package (.tgz) found in {{.TASK_HELM_BUILD_DESTINATION}}"
        else
          echo "‚úÖ Helm packages found: $(find {{.TASK_HELM_BUILD_DESTINATION}} -name "*.tgz" | wc -l) file(s)"
        fi

        # Create or update the index
        if [ -n "{{.TASK_HELM_REPO_URL}}" ]; then
          if [ -f "{{.TASK_HELM_BUILD_DESTINATION}}/index.yaml" ]; then
            echo "üõ†Ô∏è Creating a new index with local charts and merging with the existing index..."
            # Backup the existing index
            cp {{.TASK_HELM_BUILD_DESTINATION}}/index.yaml {{.TASK_HELM_BUILD_DESTINATION}}/index.yaml.bak
            # Create a new index with all present charts
            helm repo index {{.TASK_HELM_BUILD_DESTINATION}} --url "{{.TASK_HELM_REPO_URL}}" --merge {{.TASK_HELM_BUILD_DESTINATION}}/index.yaml.bak
            # Remove the backup
            rm {{.TASK_HELM_BUILD_DESTINATION}}/index.yaml.bak
          else
            echo "üÜï Creating a new index with local charts..."
            helm repo index {{.TASK_HELM_BUILD_DESTINATION}} --url "{{.TASK_HELM_REPO_URL}}"
          fi
        else
          echo "üîß Creating a Helm index in {{.TASK_HELM_BUILD_DESTINATION}} without URL..."
          helm repo index {{.TASK_HELM_BUILD_DESTINATION}}
        fi
      - cmd: echo "üéâ Repository index creation completed successfully"
        silent: true
