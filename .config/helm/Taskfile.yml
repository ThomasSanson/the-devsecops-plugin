---
version: "3"

vars:
  TASK_HELM_ENABLED: '{{.TASK_HELM_ENABLED | default "true"}}'
  TASK_HELM_VENV_DIR: '{{.TASK_HELM_VENV_DIR | default "./venv/helm"}}'
  TASK_HELM_ANSIBLE_CMD: '{{.TASK_HELM_ANSIBLE_CMD | default "./venv/helm/bin/ansible-playbook"}}'
  TASK_HELM_ANSIBLE_GALAXY_CMD: '{{.TASK_HELM_ANSIBLE_GALAXY_CMD | default "./venv/helm/bin/ansible-galaxy"}}'
  TASK_HELM_ANSIBLE_REQUIREMENTS_FILE: '{{.TASK_HELM_ANSIBLE_REQUIREMENTS_FILE | default ".config/helm/requirements.txt"}}'
  TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS: '{{.TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS | default ".config/helm/requirements.yml"}}'
  TASK_HELM_ANSIBLE_PLAYBOOK_FILE: '{{.TASK_HELM_ANSIBLE_PLAYBOOK_FILE | default ".config/helm/playbook.yml"}}'
  TASK_HELM_PYTHON_VERSION_FILE: '{{.TASK_HELM_PYTHON_VERSION_FILE | default ".config/python/.python-version"}}'
  TASK_HELM_ANSIBLE_INVENTORY_TARGET: "localhost" # DevSkim: ignore DS162092
  TASK_HELM_MAJOR_VERSION: '{{.TASK_HELM_MAJOR_VERSION | default "v3.17.1"}}'
  TASK_HELM_DIR: '{{.TASK_HELM_DIR | default "iac/helm"}}'
  TASK_HELM_CLI_OPTS: '{{.TASK_HELM_CLI_OPTS | default ""}}'
  TASK_HELM_BUILD_DESTINATION: '{{.TASK_HELM_BUILD_DESTINATION | default "tmp/build/helm"}}'
  TASK_HELM_DEPENDENCY_UPDATE: '{{.TASK_HELM_DEPENDENCY_UPDATE | default "--dependency-update"}}'

env:
  LANG: "C.UTF-8"
  LC_ALL: "C.UTF-8"
  LANGUAGE: "C.UTF-8"
  ANSIBLE_ROLES_PATH: ".config/helm/roles"

tasks:
  install:dependencies:
    desc: |
      ‚ÑπÔ∏è Description:
        Sets up Ansible and its dependencies in a dedicated virtual environment

      üîß Variables:
        - TASK_HELM_VENV_DIR: Virtual environment location
        - TASK_HELM_ANSIBLE_REQUIREMENTS_FILE: Dependencies file path

      üîê Preconditions:
        - Python 3.x must be installed
        - Internet connectivity required

      üîÑ Execution:
        Creates virtualenv and installs required packages
    preconditions:
      - sh: "command -v python3 >/dev/null 2>&1"
        msg: "‚ùå Python 3 is not installed"
      - sh: "test -f {{.TASK_HELM_PYTHON_VERSION_FILE}}"
        msg: "‚ùå Python version file not found at {{.TASK_HELM_PYTHON_VERSION_FILE}}"
      - sh: "test -f {{.TASK_HELM_ANSIBLE_REQUIREMENTS_FILE}}"
        msg: "‚ùå Requirements file not found at {{.TASK_HELM_ANSIBLE_REQUIREMENTS_FILE}}"
    cmds:
      - python$(cut -d '=' -f 2 {{.TASK_HELM_PYTHON_VERSION_FILE}}) -m venv {{.TASK_HELM_VENV_DIR}}
      - "{{.TASK_HELM_VENV_DIR}}/bin/pip install -r {{.TASK_HELM_ANSIBLE_REQUIREMENTS_FILE}}"
      - cmd: echo "‚úÖ Dependencies installed successfully"
        silent: true

  install:roles:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs required Ansible roles

      üîß Variables:
        - TASK_HELM_ANSIBLE_GALAXY_CMD: Ansible Galaxy command path
        - TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS: Roles requirements file path

      üîê Preconditions:
        - Dependencies must be installed

      üîÑ Execution:
        Installs required Ansible roles
    deps: [install:dependencies]
    preconditions:
      - sh: "test -f {{.TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS}}"
        msg: "‚ùå Roles requirements file not found at {{.TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS}}"
    cmds:
      - mkdir -p .config/helm/roles
      - "{{.TASK_HELM_ANSIBLE_GALAXY_CMD}} install -r {{.TASK_HELM_ANSIBLE_ROLES_REQUIREMENTS}} --roles-path .config/helm/roles"
      - cmd: echo "‚úÖ Ansible roles installed successfully"
        silent: true

  install:
    desc: |
      ‚ÑπÔ∏è Description:
        Installs Helm using Ansible automation

      üîß Variables:
        - TASK_HELM_ANSIBLE_CMD: Ansible command path
        - TASK_HELM_ANSIBLE_PLAYBOOK_FILE: Ansible playbook location
        - TASK_HELM_MAJOR_VERSION: Major version of Helm to install (default: 20.x)

      üîê Preconditions:
        - Dependencies must be installed
        - Roles must be installed

      üîÑ Execution:
        Runs Ansible playbook for Helm installation
    status:
      - command -v helm &> /dev/null
    preconditions:
      - sh: "test -f {{.TASK_HELM_ANSIBLE_PLAYBOOK_FILE}}"
        msg: "‚ùå Playbook file not found at {{.TASK_HELM_ANSIBLE_PLAYBOOK_FILE}}"
    cmds:
      - defer: { task: cleanup }
      - task: install:roles
      - |
        {{.TASK_HELM_ANSIBLE_CMD}} \
          -i {{.TASK_HELM_ANSIBLE_INVENTORY_TARGET}}, \
          -c local \
          -e "helm_version={{.TASK_HELM_MAJOR_VERSION}}" \
          {{.TASK_HELM_ANSIBLE_PLAYBOOK_FILE}}
      - cmd: echo "‚úÖ Helm installed successfully"
        silent: true

  cleanup:
    internal: true
    cmds:
      - rm -rf .config/helm/roles
      - rm -rf {{.TASK_HELM_VENV_DIR}}

  dependency:update:
    desc: |
      ‚ÑπÔ∏è Description:
        Update Helm dependencies defined in Chart.yaml

      üîß Variables:
        - TASK_HELM_DIR: Path to Helm charts directory
    deps: [install]
    sources:
      - "{{.TASK_HELM_DIR}}/Chart.yaml"
    generates:
      - "{{.TASK_HELM_DIR}}/Chart.lock"
    preconditions:
      - sh: test -f {{.TASK_HELM_DIR}}/Chart.yaml
        msg: ‚ùå Helm Chart.yaml not found at {{.TASK_HELM_DIR}}/Chart.yaml
    run: once
    cmds:
      - cmd: echo "üîß Update Helm dependencies..."
        silent: true
      - helm dependency update {{.TASK_HELM_DIR}}

  build:
    desc: |
      ‚ÑπÔ∏è Description:
        Universal Helm chart build task that packages the chart into a versioned archive

      üîß Variables:
        - TASK_HELM_DIR: Path to Helm charts directory
        - TASK_HELM_CLI_OPTS: Additional Helm CLI options (can be overridden with TASK_HELM_CLI_OPTS)
        - TASK_HELM_BUILD_DESTINATION: Destination directory for the built chart (default: tmp/build/helm)
        - TASK_HELM_DEPENDENCY_UPDATE: Option to update dependencies (default: --dependency-update)

      üîê Preconditions:
        - Helm must be installed
        - Chart.yaml must exist in the specified directory

      üîÑ Execution:
        - Creates build directory if it doesn't exist
        - Packages the Helm chart with dependency update
    deps: [install]
    preconditions:
      - sh: command -v helm >/dev/null 2>&1
        msg: "‚ùå Helm is not installed. Please run 'task helm:install' first."
      - sh: test -f {{.TASK_HELM_DIR}}/Chart.yaml
        msg: "‚ùå Helm Chart.yaml not found at {{.TASK_HELM_DIR}}/Chart.yaml"
    cmds:
      - mkdir -p {{.TASK_HELM_BUILD_DESTINATION}}
      - cmd: echo "üîß Building Helm chart from {{.TASK_HELM_DIR}} to {{.TASK_HELM_BUILD_DESTINATION}}..."
        silent: true
      - helm package {{.TASK_HELM_DIR}} --destination {{.TASK_HELM_BUILD_DESTINATION}} {{.TASK_HELM_DEPENDENCY_UPDATE}} {{.TASK_HELM_CLI_OPTS}}
      - cmd: echo "‚úÖ Helm chart built successfully in {{.TASK_HELM_BUILD_DESTINATION}}"
        silent: true

  lint:
    desc: |
      ‚ÑπÔ∏è Description:
        Verifies the syntax of the Helm chart.

      üîß Variables:
        - TASK_HELM_DIR: Path to Helm charts directory

      üîê Preconditions:
        - Helm must be installed.
        - Chart.yaml must exist in the specified directory.

      üîÑ Execution:
        - Runs 'helm lint' on the specified chart directory.
    deps: [install]
    preconditions:
      - sh: command -v helm >/dev/null 2>&1
        msg: "‚ùå Helm is not installed. Please run 'task helm:install' first."
      - sh: test -f {{.TASK_HELM_DIR}}/Chart.yaml
        msg: "‚ùå Helm Chart.yaml not found at {{.TASK_HELM_DIR}}/Chart.yaml"
    cmds:
      - |
        echo "Linting Helm chart in {{.TASK_HELM_DIR}}"
        helm lint "{{.TASK_HELM_DIR}}"
