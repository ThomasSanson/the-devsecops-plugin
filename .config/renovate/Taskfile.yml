---
version: "3"

vars:
  TASK_RENOVATE_ENABLED: '{{.TASK_RENOVATE_ENABLED | default "true"}}'
  TASK_RENOVATE_CONFIG: '{{.TASK_RENOVATE_CONFIG | default ".config/renovate/config.json"}}'
  TASK_RENOVATE_REPOSITORY: '{{.TASK_RENOVATE_REPOSITORY | default "."}}'
  TASK_RENOVATE_LOG_LEVEL: '{{.TASK_RENOVATE_LOG_LEVEL | default "info"}}'
  TASK_RENOVATE_PLATFORM: '{{.TASK_RENOVATE_PLATFORM | default "gitlab"}}'
  TASK_RENOVATE_ENDPOINT: '{{.TASK_RENOVATE_ENDPOINT | default ""}}'
  TASK_RENOVATE_CLI_OPTS: '{{.TASK_RENOVATE_CLI_OPTS | default ""}}'
  TASK_RENOVATE_DRY_RUN: '{{.TASK_RENOVATE_DRY_RUN | default "false"}}'
  TASK_RENOVATE_TOKEN: '{{.TASK_RENOVATE_TOKEN | default (env "RENOVATE_TOKEN")}}'

tasks:
  default:
    desc: Run Renovate with configurable options
    deps: [check]
    status:
      - test "{{.TASK_RENOVATE_ENABLED}}" != "true"
    vars:
      TASK_RENOVATE_CMD:
        sh: |
          # Safer shell behaviour
          set -eu

          # Start building the command early
          CMD="npx --yes renovate"

          # Append dry-run argument directly
          case "{{.TASK_RENOVATE_DRY_RUN}}" in
            ""|"false")
              : # no dry-run
              ;;
            "true"|"full")
              CMD="$CMD --dry-run=full"
              ;;
            "lookup"|"extract")
              CMD="$CMD --dry-run={{.TASK_RENOVATE_DRY_RUN}}"
              ;;
            *)
              CMD="$CMD --dry-run={{.TASK_RENOVATE_DRY_RUN}}"
              ;;
          esac

          # Append platform argument directly
          if [ -n "{{.TASK_RENOVATE_PLATFORM}}" ]; then
            CMD="$CMD --platform={{.TASK_RENOVATE_PLATFORM}}"
          fi

          # Append optional CLI options
          if [ -n "{{.TASK_RENOVATE_CLI_OPTS}}" ]; then
            CMD="$CMD {{.TASK_RENOVATE_CLI_OPTS}}"
          fi

          # Append repository only when not using local platform
          if [ "{{.TASK_RENOVATE_PLATFORM}}" != "local" ] && [ -n "{{.TASK_RENOVATE_REPOSITORY}}" ]; then
            CMD="$CMD {{.TASK_RENOVATE_REPOSITORY}}"
          fi

          # Append trailing CLI args (from the Task invocation)
          if [ -n "{{.CLI_ARGS}}" ]; then
            CMD="$CMD {{.CLI_ARGS}}"
          fi

          # Environment prefix (deterministic order)
          ENV_PREFIX="LOG_LEVEL=\"{{.TASK_RENOVATE_LOG_LEVEL}}\" RENOVATE_CONFIG_FILE=\"{{.TASK_RENOVATE_CONFIG}}\" RENOVATE_TOKEN=\"{{.TASK_RENOVATE_TOKEN}}\""
          if [ -n "{{.TASK_RENOVATE_ENDPOINT}}" ]; then
            ENV_PREFIX="RENOVATE_ENDPOINT=\"{{.TASK_RENOVATE_ENDPOINT}}\" $ENV_PREFIX"
          fi

          # Print the final single-line command
          echo "$ENV_PREFIX $CMD"
    cmds:
      - cmd: '{{.TASK_RENOVATE_CMD}}'

  check:
    desc: Verify prerequisites for npx usage
    preconditions:
      - sh: command -v npx >/dev/null 2>&1
        msg: "‚ùå Missing prerequisite: please install Node.js/npm to use npx."

  validate:
    desc: Validate the Renovate configuration file
    cmds:
      - task: default
        vars:
          TASK_RENOVATE_CMD: 'LOG_LEVEL="{{.TASK_RENOVATE_LOG_LEVEL}}" npx --yes -p renovate renovate-config-validator "{{.TASK_RENOVATE_CONFIG}}"'

  dry-run:
    desc: Local dry-run of Renovate with the provided configuration
    cmds:
      - task: default
        vars:
          TASK_RENOVATE_PLATFORM: "local"
