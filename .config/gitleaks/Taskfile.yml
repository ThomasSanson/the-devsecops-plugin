---
version: "3"

vars:
  TASK_GITLEAKS_ENABLED: '{{.TASK_GITLEAKS_ENABLED | default "true"}}'
  TASK_GITLEAKS_IMAGE: '{{.TASK_GITLEAKS_IMAGE | default "zricethezav/gitleaks:latest"}}'
  TASK_GITLEAKS_CONFIG: '{{.TASK_GITLEAKS_CONFIG | default ".config/gitleaks/config.toml"}}'
  TASK_GITLEAKS_VERBOSE: '{{.TASK_GITLEAKS_VERBOSE | default "true"}}'

tasks:
  default:
    desc: Scan the repository for secrets using gitleaks (full scan).
    deps:
      - scan-full
    summary: |
      ‚ÑπÔ∏è Description:
        Runs gitleaks in detect mode to scan the entire repository for secrets.

      üîß Variables:
        - TASK_GITLEAKS_ENABLED: Enable or disable gitleaks. Default: "true"
        - TASK_GITLEAKS_IMAGE: Docker image for gitleaks. Default: "zricethezav/gitleaks:latest"
        - TASK_GITLEAKS_CONFIG: Path to gitleaks configuration file. Default: ".config/gitleaks/config.toml"
        - TASK_GITLEAKS_VERBOSE: Enable verbose output. Default: "true"

      üîÑ Execution:
        Runs gitleaks detect on the entire repository.

      üìù Note:
        This task is part of the CODE phase of DevSecOps.

  scan-full:
    desc: Scan the entire repository for secrets (full scan).
    summary: |
      ‚ÑπÔ∏è Description:
        Performs a full scan of the repository to detect secrets.

      üîÑ Execution:
        Runs gitleaks detect command on the entire repository.
    status:
      - test "{{.TASK_GITLEAKS_ENABLED}}" = "false"
    vars:
      VERBOSE_FLAG: '{{if eq .TASK_GITLEAKS_VERBOSE "true"}}-v{{else}}{{end}}'
      RED: '\033[0;31m'
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      NC: '\033[0m' # No Color
    cmds:
      - cmd: echo "üîç Scanning repository for secrets with gitleaks"
        silent: true
      - cmd: |
          if ! docker run --rm \
            -v "{{.ROOT_DIR}}:/path" \
            -w /path \
            {{.TASK_GITLEAKS_IMAGE}} \
            detect \
            --source="/path" \
            --config="/path/{{.TASK_GITLEAKS_CONFIG}}" \
            --no-git \
            {{.VERBOSE_FLAG}}; then
            echo -e "{{.RED}}‚ùå Gitleaks detected secrets in your code!{{.NC}}"
            echo -e "{{.YELLOW}}‚ö†Ô∏è  Please remove any secrets and use environment variables instead.{{.NC}}"
            exit 1
          fi
        silent: true
      - cmd: echo "üéâ No secrets detected by gitleaks."
        silent: true

  protect:
    desc: Scan staged files for secrets (pre-commit hook).
    summary: |
      ‚ÑπÔ∏è Description:
        Scans only staged files for secrets before committing.
        This is optimized for pre-commit hooks.

      üîÑ Execution:
        Runs gitleaks protect command on staged files.

      üìù Note:
        This task is designed for use with git hooks (pre-commit).
    status:
      - test "{{.TASK_GITLEAKS_ENABLED}}" = "false"
    vars:
      VERBOSE_FLAG: '{{if eq .TASK_GITLEAKS_VERBOSE "true"}}-v{{else}}{{end}}'
      RED: '\033[0;31m'
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      NC: '\033[0m' # No Color
    cmds:
      - cmd: echo "üîç Scanning staged files for secrets with gitleaks"
        silent: true
      - cmd: |
          if ! docker run --rm \
            -v "{{.ROOT_DIR}}:/path" \
            -w /path \
            {{.TASK_GITLEAKS_IMAGE}} \
            protect \
            --source="/path" \
            --config="/path/{{.TASK_GITLEAKS_CONFIG}}" \
            --staged \
            {{.VERBOSE_FLAG}}; then
            echo -e "{{.RED}}‚ùå Gitleaks detected secrets in your staged files!{{.NC}}"
            echo -e "{{.YELLOW}}‚ö†Ô∏è  Please remove any secrets before committing.{{.NC}}"
            echo -e "To skip this check (NOT RECOMMENDED), use: git commit --no-verify"
            exit 1
          fi
        silent: true
      - cmd: echo "üéâ No secrets detected in staged files."
        silent: true

  scan-branch:
    desc: Scan only branch commits for secrets (incremental scan).
    summary: |
      ‚ÑπÔ∏è Description:
        Scans only the commits of the current branch since its divergence from the base branch.
        This is an incremental scan, optimised for speed (local or CI/CD).
        Uses pure Git commands to detect the merge-base automatically.

      üîÑ Execution:
        1. Ensures the base branch is fetched (shallow clone support)
        2. Uses git merge-base to find the divergence point
        3. Runs gitleaks detect only on branch commits

      üîß Variables:
        - TASK_GITLEAKS_BASE_BRANCH: Base branch name. Default: "main"

      üìù Note:
        Useful for local development and CI/CD pipelines.
        The base branch must exist in the repository.
    status:
      - test "{{.TASK_GITLEAKS_ENABLED}}" = "false"
    vars:
      VERBOSE_FLAG: '{{if eq .TASK_GITLEAKS_VERBOSE "true"}}-v{{else}}{{end}}'
      BASE_BRANCH: '{{.TASK_GITLEAKS_BASE_BRANCH | default "main"}}'
      RED: '\033[0;31m'
      GREEN: '\033[0;32m'
      YELLOW: '\033[1;33m'
      NC: '\033[0m' # No Color
    cmds:
      - cmd: echo "üîç Preparing Git repository for gitleaks scan"
        silent: true
      # Ensure we have the base branch (for shallow clones in CI)
      - cmd: |
          if ! git rev-parse --verify origin/{{.BASE_BRANCH}} >/dev/null 2>&1; then
            echo "üì• Fetching base branch: {{.BASE_BRANCH}}"
            git fetch --depth=100 origin {{.BASE_BRANCH}}:refs/remotes/origin/{{.BASE_BRANCH}} 2>/dev/null || true
          fi
        silent: false
      # Find merge-base and scan only branch commits
      - cmd: |
          MERGE_BASE=$(git merge-base origin/{{.BASE_BRANCH}} HEAD 2>/dev/null || echo "origin/{{.BASE_BRANCH}}")
          echo "üîç Scanning commits from ${MERGE_BASE} to HEAD"

          if ! docker run --rm \
            -v "{{.ROOT_DIR}}:/path" \
            -w /path \
            {{.TASK_GITLEAKS_IMAGE}} \
            detect \
            --source="/path" \
            --config="/path/{{.TASK_GITLEAKS_CONFIG}}" \
            --log-opts="${MERGE_BASE}..HEAD" \
            {{.VERBOSE_FLAG}}; then
            echo -e "{{.RED}}‚ùå Gitleaks detected secrets in your branch commits!{{.NC}}"
            echo -e "{{.YELLOW}}‚ö†Ô∏è  Please remove any secrets from the commits.{{.NC}}"
            exit 1
          fi
        silent: true
      - cmd: echo "üéâ No secrets detected in branch commits."
        silent: true
